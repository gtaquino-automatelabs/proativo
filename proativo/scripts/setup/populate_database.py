#!/usr/bin/env python3
"""
Script melhorado para popular o banco de dados.
Processa equipamentos primeiro, depois manuten√ß√µes com convers√£o de c√≥digos.
"""

import asyncio
import os
import sys
import logging
from pathlib import Path
from typing import Dict, List, Any

# Configurar paths - usar mesma l√≥gica dos testes que funciona
current_script_dir = os.path.dirname(__file__)
project_root = os.path.join(current_script_dir, "..", "..")  # scripts/setup -> proativo/
src_path = os.path.join(project_root, "src")

print("=" * 50)
print("üêç INICIANDO CONFIGURA√á√ÉO DE PATHS")
print(f"üõ†Ô∏è  Script dir: {current_script_dir}")
print(f"üìÅ Project root: {project_root}")
print(f"üì¶ Src path: {src_path}")

# Verificar se os paths existem
import os
print(f"‚úÖ Project root exists: {os.path.exists(project_root)}")
print(f"‚úÖ Src path exists: {os.path.exists(src_path)}")

# Adicionar src ao path para imports (mesma l√≥gica do conftest.py)
sys.path.insert(0, src_path)
sys.path.insert(0, project_root)

print(f"üõ§Ô∏è  Python path configurado!")
print(f"üîç sys.path primeiros 5 itens:")
for i, path in enumerate(sys.path[:5]):
    print(f"   {i}: {path}")
print("=" * 50)

try:
    print("üîÑ Tentando importar m√≥dulos...")
    from src.etl.data_processor import DataProcessor, DataType, FileFormat
    from src.database.repositories import RepositoryManager
    print("‚úÖ Importa√ß√µes realizadas com sucesso!")
except ImportError as e:
    print(f"‚ùå ERRO de importa√ß√£o: {e}")
    print("üìã Conte√∫do do diret√≥rio src:")
    if os.path.exists(src_path):
        for item in os.listdir(src_path):
            print(f"   - {item}")
    sys.exit(1)

async def populate_database():
    """Popula o banco de dados em duas etapas: equipamentos depois manuten√ß√µes."""
    print("INICIANDO POPULA√á√ÉO DO BANCO DE DADOS V2...")
    print("=" * 60)
    
    try:
        print("M√≥dulos importados com sucesso")
        
        # Configurar logging
        logging.basicConfig(level=logging.INFO)
        
        # Inicializar conex√£o com banco de dados
        print("Inicializando conex√£o com banco de dados...")
        from src.database.connection import db_connection, create_tables
        
        await db_connection.initialize()
        
        # Criar tabelas se n√£o existirem
        print("Criando tabelas se necess√°rio...")
        await create_tables()
        
        # Criar sess√£o do banco
        async with db_connection.get_session() as session:
            # Inicializar reposit√≥rios
            print("Inicializando reposit√≥rios...")
            repository_manager = RepositoryManager(session)
            
            # Inicializar processador ETL
            print("Inicializando processador ETL...")
            processor = DataProcessor(repository_manager)
            
            # ==========================================
            # TRANSA√á√ÉO 1: EQUIPAMENTOS (SEPARADA)
            # ==========================================
            print("\n" + "=" * 60)
            print("ETAPA 1: PROCESSANDO EQUIPAMENTOS (APENAS CSV)")
            print("=" * 60)
            
            # PROCESSAR APENAS equipment.csv para evitar duplica√ß√µes
            equipment_files = [
                Path(project_root) / "data/samples/equipment.csv"
                # Removidos: equipment.xml e electrical_assets.xlsx (duplicados)
            ]
            
            equipment_saved = 0
            
            for file_path in equipment_files:
                if not file_path.exists():
                    print(f"Arquivo n√£o encontrado: {file_path}")
                    continue
                
                print(f"\nProcessando equipamentos: {file_path.name}")
                
                try:
                    # For√ßa tipo EQUIPMENT
                    result = await processor.process_and_save(file_path, DataType.EQUIPMENT)
                    
                    if result['success'] and result['saved_records'] > 0:
                        equipment_saved += result['saved_records']
                        print(f"   SUCESSO: {result['saved_records']} equipamentos salvos")
                    else:
                        print(f"   FALHA: {result.get('error', 'Erro desconhecido')}")
                        
                except Exception as e:
                    print(f"   ERRO ao processar {file_path.name}: {e}")
            
            # COMMIT EQUIPAMENTOS (transa√ß√£o separada)
            await session.commit()
            print(f"\n‚úÖ TRANSA√á√ÉO DE EQUIPAMENTOS CONFIRMADA: {equipment_saved} equipamentos")
            
            # Buscar TODOS os equipamentos para mapeamento c√≥digo->UUID
            equipments = await repository_manager.equipment.get_all()
            equipment_map = {}
            for eq in equipments:
                equipment_map[eq.code] = str(eq.id)
            
            print(f"Mapeamento c√≥digo->UUID: {len(equipment_map)} equipamentos")
            
            if equipment_saved == 0:
                print("ERRO: Nenhum equipamento foi criado. N√£o √© poss√≠vel processar manuten√ß√µes.")
                return False
        
        # ==========================================
        # TRANSA√á√ÉO 2: MANUTEN√á√ïES (NOVA SESS√ÉO)
        # ==========================================
        async with db_connection.get_session() as maintenance_session:
            print("\n" + "=" * 60)
            print("ETAPA 2: PROCESSANDO MANUTEN√á√ïES (NOVA TRANSA√á√ÉO)")
            print("=" * 60)
            
            # Reposit√≥rios para nova sess√£o
            maintenance_repository_manager = RepositoryManager(maintenance_session)
            maintenance_processor = DataProcessor(maintenance_repository_manager)
            
            maintenance_files = [
                Path(project_root) / "data/samples/maintenance_orders.csv",
                Path(project_root) / "data/samples/maintenance_schedules.csv",
                Path(project_root) / "data/samples/maintenance_orders.xml"
            ]
            
            maintenance_saved = 0
            
            for file_path in maintenance_files:
                if not file_path.exists():
                    print(f"Arquivo n√£o encontrado: {file_path}")
                    continue
                
                print(f"\nProcessando manuten√ß√µes: {file_path.name}")
                
                try:
                    # Processar arquivo mas N√ÉO salvar ainda
                    valid_records, validation_errors = maintenance_processor.process_file(file_path, DataType.MAINTENANCE)
                    
                    print(f"   Registros processados: {len(valid_records)} v√°lidos, {len(validation_errors)} inv√°lidos")
                    
                    # Converter c√≥digos para UUIDs
                    converted_records = []
                    conversion_errors = 0
                    
                    for i, record in enumerate(valid_records):
                        equipment_code = record.get('equipment_id')
                        
                        # üîç DEBUG DETALHADO
                        if i < 3:  # S√≥ os primeiros 3 registros para n√£o poluir
                            print(f"   üîç DEBUG REGISTRO {i}: equipment_id = '{equipment_code}', todas chaves: {list(record.keys())}")
                        
                        if equipment_code and equipment_code in equipment_map:
                            # Converte c√≥digo para UUID
                            record['equipment_id'] = equipment_map[equipment_code]
                            converted_records.append(record)
                            print(f"   ‚úÖ Equipamento '{equipment_code}' mapeado com sucesso")
                        else:
                            conversion_errors += 1
                            print(f"   ‚ö†Ô∏è  Equipamento '{equipment_code}' n√£o encontrado")
                    
                    print(f"   Convers√µes: {len(converted_records)} sucesso, {conversion_errors} falhas")
                    
                    # Salvar registros convertidos
                    if converted_records:
                        saved_count = await maintenance_processor.save_to_database(converted_records, DataType.MAINTENANCE)
                        maintenance_saved += saved_count
                        print(f"   SUCESSO: {saved_count} manuten√ß√µes salvas")
                    
                except Exception as e:
                    print(f"   ERRO ao processar {file_path.name}: {e}")
            
            # COMMIT MANUTEN√á√ïES (transa√ß√£o separada)
            await maintenance_session.commit()
            print(f"\n‚úÖ TRANSA√á√ÉO DE MANUTEN√á√ïES CONFIRMADA: {maintenance_saved} manuten√ß√µes")
            
            # Resumo final
            print("\n" + "=" * 60)
            print("RESUMO DA POPULA√á√ÉO V3 - TRANSA√á√ïES SEPARADAS")
            print("=" * 60)
            print(f"Equipamentos criados: {equipment_saved}")
            print(f"Manuten√ß√µes criadas: {maintenance_saved}")
            print(f"Total de registros: {equipment_saved + maintenance_saved}")
            
            if equipment_saved > 0 or maintenance_saved > 0:
                print("BANCO DE DADOS POPULADO COM SUCESSO!")
                return True
            else:
                print("ERRO: Nenhum registro foi criado")
                return False
            
    except Exception as e:
        print(f"ERRO inesperado: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal."""
    try:
        success = asyncio.run(populate_database())
        if success:
            print("\nScript executado com sucesso!")
            return 0
        else:
            print("\nScript executado com problemas")
            return 1
    except KeyboardInterrupt:
        print("\nScript interrompido pelo usu√°rio")
        return 1
    except Exception as e:
        print(f"\nErro fatal: {e}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 