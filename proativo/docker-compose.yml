version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: proativo-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-proativo_db}
      POSTGRES_USER: ${POSTGRES_USER:-proativo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-proativo_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - proativo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-proativo_user} -d ${POSTGRES_DB:-proativo_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PgAdmin para gerenciamento do banco
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: proativo-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@proativo.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - proativo-network
    depends_on:
      postgres:
        condition: service_healthy

  # Aplicação PROAtivo
  proativo-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proativo-app
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-proativo_user}:${POSTGRES_PASSWORD:-proativo_password}@postgres:5432/${POSTGRES_DB:-proativo_db}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-proativo_db}
      POSTGRES_USER: ${POSTGRES_USER:-proativo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-proativo_password}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      GEMINI_MODEL: ${GEMINI_MODEL:-gemini-2.5-flash}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      API_SECRET_KEY: ${API_SECRET_KEY:-your_secret_key_for_jwt_here}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: logs/proativo.log
      DEBUG: ${DEBUG:-false}
      TESTING: ${TESTING:-false}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./src:/app/src
    networks:
      - proativo-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Streamlit (opcional para desenvolvimento)
  streamlit-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proativo-streamlit
    restart: unless-stopped
    command: ["streamlit", "run", "src/frontend/app.py", "--server.address", "0.0.0.0", "--server.port", "8501"]
    environment:
      API_BASE_URL: http://proativo-app:8000
      STREAMLIT_HOST: ${STREAMLIT_HOST:-0.0.0.0}
      STREAMLIT_PORT: ${STREAMLIT_PORT:-8501}
    ports:
      - "8501:8501"
    volumes:
      - ./src:/app/src
    networks:
      - proativo-network
    depends_on:
      proativo-app:
        condition: service_healthy

# Volumes para persistência de dados
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

# Rede interna para comunicação entre serviços
networks:
  proativo-network:
    driver: bridge
    name: proativo-network 