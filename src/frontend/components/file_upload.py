"""
Componente de upload de arquivos para interface Streamlit.

Este m√≥dulo implementa a interface de usu√°rio para upload de arquivos
de dados, incluindo valida√ß√µes, feedback visual e integra√ß√£o com a API.
"""

import streamlit as st
import pandas as pd
from typing import Optional, List, Dict, Any, Tuple
from pathlib import Path
import time
import uuid
import asyncio
from datetime import datetime, timedelta

from services.api_client import APIClient
from api.models.upload import FileType


class FileUploadComponent:
    """Componente para upload de arquivos no Streamlit."""
    
    def __init__(self, api_client: APIClient):
        """
        Inicializa o componente de upload.
        
        Args:
            api_client: Cliente da API para comunica√ß√£o
        """
        self.api_client = api_client
        self.allowed_extensions = ['.csv', '.xlsx', '.xls', '.xml']
        self.max_size_mb = 50
        
    def render(self) -> Optional[Dict[str, Any]]:
        """
        Renderiza a interface de upload de arquivos.
        
        Returns:
            Dict com informa√ß√µes do upload se realizado, None caso contr√°rio
        """
        st.subheader("üìÅ Upload de Arquivos de Dados")
        
        # Informa√ß√µes sobre tipos aceitos
        with st.expander("‚ÑπÔ∏è Tipos de arquivo aceitos", expanded=False):
            st.markdown("""
            **Formatos suportados:**
            - **CSV** (.csv) - Dados separados por v√≠rgula
            - **Excel** (.xlsx, .xls) - Planilhas do Microsoft Excel  
            - **XML** (.xml) - Dados estruturados em XML
            
            **Tipos de dados reconhecidos:**
            - **Equipamentos**: Arquivos contendo dados de ativos e equipamentos
            - **Manuten√ß√µes**: Dados de ordens de servi√ßo e hist√≥rico de manuten√ß√£o
            
            **Limites:**
            - Tamanho m√°ximo: 50 MB
            - O sistema detecta automaticamente o tipo de dados baseado no nome do arquivo
            """)
        
        # Interface de upload
        uploaded_file = st.file_uploader(
            "Escolha um arquivo",
            type=['csv', 'xlsx', 'xls', 'xml'],
            help=f"Formatos aceitos: {', '.join(self.allowed_extensions)} ‚Ä¢ Tamanho m√°ximo: {self.max_size_mb}MB"
        )
        
        if uploaded_file is not None:
            return self._handle_uploaded_file(uploaded_file)
        
        return None
    
    def _handle_uploaded_file(self, uploaded_file) -> Optional[Dict[str, Any]]:
        """
        Processa arquivo enviado pelo usu√°rio.
        
        Args:
            uploaded_file: Arquivo enviado via st.file_uploader
            
        Returns:
            Dict com resultado do upload
        """
        # Valida√ß√µes frontend
        validation_result = self._validate_file(uploaded_file)
        if not validation_result["valid"]:
            st.error(f"‚ùå {validation_result['message']}")
            return None
        
        # Exibir informa√ß√µes do arquivo
        file_info = self._display_file_info(uploaded_file)
        
        # Op√ß√µes de upload
        col1, col2 = st.columns(2)
        
        with col1:
            file_type = st.selectbox(
                "Tipo de dados",
                options=[None, FileType.EQUIPMENT, FileType.MAINTENANCE],
                format_func=lambda x: {
                    None: "üîç Auto-detectar",
                    FileType.EQUIPMENT: "‚öôÔ∏è Equipamentos",
                    FileType.MAINTENANCE: "üîß Manuten√ß√µes"
                }.get(x, str(x)),
                help="Deixe em 'Auto-detectar' para identifica√ß√£o autom√°tica"
            )
        
        with col2:
            overwrite_existing = st.checkbox(
                "Sobrescrever dados existentes",
                value=False,
                help="Se marcado, dados existentes ser√£o substitu√≠dos"
            )
        
        # Campo de descri√ß√£o
        description = st.text_area(
            "Descri√ß√£o (opcional)",
            placeholder="Ex: Arquivo de equipamentos da planta industrial - Janeiro 2024",
            max_chars=500,
            help="Descri√ß√£o opcional para identificar o upload"
        )
        
        # Preview dos dados (se poss√≠vel)
        preview_data = self._generate_preview(uploaded_file)
        if preview_data is not None:
            with st.expander("üëÄ Preview dos dados", expanded=False):
                st.dataframe(preview_data, use_container_width=True)
        
        # Bot√£o de upload
        if st.button("üöÄ Fazer Upload", type="primary", use_container_width=True):
            return self._perform_upload(
                uploaded_file, 
                file_type, 
                description, 
                overwrite_existing
            )
        
        return None
    
    def _validate_file(self, uploaded_file) -> Dict[str, Any]:
        """
        Valida arquivo antes do upload.
        
        Args:
            uploaded_file: Arquivo a ser validado
            
        Returns:
            Dict com resultado da valida√ß√£o
        """
        # Verificar extens√£o
        file_extension = Path(uploaded_file.name).suffix.lower()
        if file_extension not in self.allowed_extensions:
            return {
                "valid": False,
                "message": f"Extens√£o '{file_extension}' n√£o permitida. Use: {', '.join(self.allowed_extensions)}"
            }
        
        # Verificar tamanho
        file_size_mb = uploaded_file.size / (1024 * 1024)
        if file_size_mb > self.max_size_mb:
            return {
                "valid": False,
                "message": f"Arquivo muito grande ({file_size_mb:.1f}MB). Tamanho m√°ximo: {self.max_size_mb}MB"
            }
        
        return {"valid": True, "message": "Arquivo v√°lido"}
    
    def _display_file_info(self, uploaded_file) -> Dict[str, Any]:
        """
        Exibe informa√ß√µes do arquivo carregado.
        
        Args:
            uploaded_file: Arquivo carregado
            
        Returns:
            Dict com informa√ß√µes do arquivo
        """
        file_size_mb = uploaded_file.size / (1024 * 1024)
        file_extension = Path(uploaded_file.name).suffix.lower()
        
        # Detectar tipo prov√°vel
        detected_type = self._detect_file_type(uploaded_file.name)
        
        info_data = {
            "Nome": uploaded_file.name,
            "Tamanho": f"{file_size_mb:.2f} MB",
            "Tipo": file_extension.upper(),
            "Tipo detectado": {
                FileType.EQUIPMENT: "‚öôÔ∏è Equipamentos",
                FileType.MAINTENANCE: "üîß Manuten√ß√µes",
                FileType.UNKNOWN: "‚ùì N√£o identificado"
            }.get(detected_type, "‚ùì Desconhecido")
        }
        
        # Exibir em colunas
        cols = st.columns(4)
        for i, (key, value) in enumerate(info_data.items()):
            with cols[i]:
                st.metric(key, value)
        
        return info_data
    
    def _detect_file_type(self, filename: str) -> FileType:
        """
        Detecta tipo de arquivo baseado no nome.
        
        Args:
            filename: Nome do arquivo
            
        Returns:
            FileType detectado
        """
        filename_lower = filename.lower()
        
        # Palavras-chave para equipamentos
        equipment_keywords = ['equipment', 'equipamento', 'equip', 'asset', 'ativo']
        
        # Palavras-chave para manuten√ß√µes
        maintenance_keywords = ['maintenance', 'manutencao', 'manuten√ß√£o', 'maint', 'servico', 'servi√ßo']
        
        # Verificar equipamentos
        for keyword in equipment_keywords:
            if keyword in filename_lower:
                return FileType.EQUIPMENT
        
        # Verificar manuten√ß√µes
        for keyword in maintenance_keywords:
            if keyword in filename_lower:
                return FileType.MAINTENANCE
        
        return FileType.UNKNOWN
    
    def _generate_preview(self, uploaded_file) -> Optional[pd.DataFrame]:
        """
        Gera preview dos dados do arquivo.
        
        Args:
            uploaded_file: Arquivo para preview
            
        Returns:
            DataFrame com preview ou None se n√£o poss√≠vel
        """
        try:
            file_extension = Path(uploaded_file.name).suffix.lower()
            
            # Reset file pointer
            uploaded_file.seek(0)
            
            if file_extension == '.csv':
                # Tentar diferentes encodings
                for encoding in ['utf-8', 'latin-1', 'cp1252']:
                    try:
                        uploaded_file.seek(0)
                        df = pd.read_csv(uploaded_file, encoding=encoding, nrows=5)
                        return df
                    except UnicodeDecodeError:
                        continue
                    except Exception:
                        break
                        
            elif file_extension in ['.xlsx', '.xls']:
                uploaded_file.seek(0)
                df = pd.read_excel(uploaded_file, nrows=5)
                return df
                
            # XML √© mais complexo, n√£o implementar preview por agora
            
        except Exception as e:
            st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel gerar preview: {str(e)}")
        
        return None
    
    def _perform_upload(self, uploaded_file, file_type: Optional[FileType], 
                       description: str, overwrite_existing: bool) -> Dict[str, Any]:
        """
        Executa o upload do arquivo.
        
        Args:
            uploaded_file: Arquivo para upload
            file_type: Tipo de dados
            description: Descri√ß√£o do upload
            overwrite_existing: Se deve sobrescrever dados
            
        Returns:
            Dict com resultado do upload
        """
        progress_placeholder = st.empty()
        status_placeholder = st.empty()
        
        try:
            # Mostrar progresso
            with progress_placeholder.container():
                progress_bar = st.progress(0)
                status_text = st.text("üöÄ Iniciando upload...")
            
            # Preparar dados do arquivo
            uploaded_file.seek(0)
            file_content = uploaded_file.read()
            
            # Simular progresso de upload
            for i in range(0, 101, 20):
                progress_bar.progress(i)
                if i == 20:
                    status_text.text("üì§ Enviando arquivo...")
                elif i == 60:
                    status_text.text("üîç Validando dados...")
                elif i == 80:
                    status_text.text("üíæ Salvando arquivo...")
                time.sleep(0.3)
            
            # Fazer upload real via API
            api_result, success = self.api_client.upload_file(
                file_content=file_content,
                filename=uploaded_file.name,
                file_type=file_type.value if file_type else "",
                description=description,
                overwrite_existing=overwrite_existing
            )
            
            if success and api_result:
                upload_result = {
                    "success": True,
                    "upload_id": api_result.get("upload_id"),
                    "filename": api_result.get("filename"),
                    "file_size": api_result.get("file_size"),
                    "file_type": api_result.get("file_type"),
                    "message": api_result.get("message", "Arquivo enviado com sucesso!")
                }
            else:
                upload_result = {
                    "success": False,
                    "message": "Erro ao enviar arquivo para o servidor"
                }
            
            # Limpar progresso
            progress_placeholder.empty()
            
            # Exibir resultado
            if upload_result["success"]:
                status_placeholder.success(f"‚úÖ {upload_result['message']}")
                
                # Exibir informa√ß√µes do upload
                st.info(f"""
                **Upload realizado com sucesso!**
                - üÜî ID: `{upload_result['upload_id']}`
                - üìÅ Arquivo: {upload_result['filename']}
                - üìä Tipo: {upload_result['file_type']}
                - ‚è∞ Status: Aguardando processamento
                """)
                
                # Bot√£o para processar imediatamente
                col1, col2 = st.columns([2, 1])
                with col1:
                    if st.button("üöÄ Processar Agora", type="primary", use_container_width=True):
                        upload_id = upload_result.get('upload_id')
                        if upload_id:
                            with st.spinner("‚öôÔ∏è Processando arquivo..."):
                                try:
                                    # Usar o mesmo m√©todo da UploadHistoryComponent
                                    result, success = self.api_client.process_single_upload(upload_id)
                                    
                                    if success and result and result.get("success", False):
                                        st.success(f"‚úÖ **Processamento conclu√≠do!**")
                                        st.balloons()
                                        time.sleep(2)
                                        st.rerun()
                                    else:
                                        error_msg = result.get("error", "Erro desconhecido") if result else "Falha na comunica√ß√£o"
                                        st.warning(f"‚ö†Ô∏è **Processamento pendente:** {error_msg}")
                                        st.info("üí° O arquivo ficar√° dispon√≠vel para processamento na aba 'Hist√≥rico'.")
                                except Exception as e:
                                    st.warning(f"‚ö†Ô∏è **Processamento pendente:** {str(e)}")
                                    st.info("üí° O arquivo ficar√° dispon√≠vel para processamento na aba 'Hist√≥rico'.")
                        
                with col2:
                    st.info("üí° Ou processe depois na aba **Hist√≥rico**")
                
                return upload_result
            else:
                status_placeholder.error(f"‚ùå Erro no upload: {upload_result.get('message', 'Erro desconhecido')}")
                
        except Exception as e:
            progress_placeholder.empty()
            status_placeholder.error(f"‚ùå Erro durante upload: {str(e)}")
            
        return {
            "success": False,
            "message": "Erro durante o upload"
        }


def render_upload_interface(api_client: APIClient) -> Optional[Dict[str, Any]]:
    """
    Fun√ß√£o helper para renderizar interface de upload.
    
    Args:
        api_client: Cliente da API
        
    Returns:
        Resultado do upload se realizado
    """
    component = FileUploadComponent(api_client)
    return component.render()


class UploadHistoryComponent:
    """Componente para exibir hist√≥rico de uploads."""
    
    def __init__(self, api_client: APIClient):
        """
        Inicializa o componente de hist√≥rico.
        
        Args:
            api_client: Cliente da API para comunica√ß√£o
        """
        self.api_client = api_client
    
    def render(self) -> None:
        """Renderiza o hist√≥rico de uploads."""
        st.subheader("üìã Hist√≥rico de Uploads")
        
        # Verificar uploads pendentes primeiro
        self._render_pending_uploads_section()
        
        st.markdown("---")
        
        # Controles de filtro
        col1, col2, col3 = st.columns([2, 2, 1])
        
        with col1:
            status_filter = st.selectbox(
                "Filtrar por status:",
                options=["Todos", "uploaded", "processing", "completed", "failed"],
                format_func=lambda x: {
                    "Todos": "üîç Todos os status",
                    "uploaded": "üì§ Aguardando processamento",
                    "processing": "‚öôÔ∏è Processando",
                    "completed": "‚úÖ Conclu√≠do",
                    "failed": "‚ùå Falhou"
                }.get(x, x)
            )
        
        with col2:
            limit = st.selectbox(
                "N√∫mero de registros:",
                options=[10, 25, 50, 100],
                index=1,
                help="Quantos uploads exibir"
            )
        
        with col3:
            if st.button("üîÑ Atualizar", use_container_width=True):
                st.rerun()
        
        # Buscar hist√≥rico via API
        try:
            history_data, success = self.api_client.get_upload_history(limit=limit)
            
            if success and history_data:
                uploads = history_data.get("uploads", [])
                
                if uploads:
                    self._render_upload_table(uploads, status_filter)
                else:
                    st.info("üì≠ Nenhum upload encontrado.")
            else:
                st.error("‚ùå Erro ao carregar hist√≥rico de uploads.")
                
        except Exception as e:
            st.error(f"‚ùå Erro ao buscar hist√≥rico: {str(e)}")

    def _render_pending_uploads_section(self) -> None:
        """Renderiza se√ß√£o espec√≠fica para uploads pendentes com processamento autom√°tico."""
        st.subheader("‚ö° Processamento Autom√°tico")
        
        try:
            # Buscar uploads pendentes
            pending_data, success = self.api_client.get_pending_uploads()
            
            if success and pending_data:
                total_pending = pending_data.get("total_pending", 0)
                uploads = pending_data.get("uploads", [])
                
                if total_pending > 0:
                    # Alerta de uploads pendentes
                    st.warning(f"‚ö†Ô∏è **{total_pending} upload(s) aguardando processamento**")
                    
                    # Bot√µes de a√ß√£o
                    col1, col2, col3 = st.columns([2, 2, 2])
                    
                    with col1:
                        if st.button("üöÄ Processar Todos", 
                                   type="primary", 
                                   use_container_width=True,
                                   help="Processa todos os uploads pendentes"):
                            self._process_all_pending_uploads()
                    
                    with col2:
                        auto_process = st.checkbox("üîÑ Processamento autom√°tico", 
                                                 help="Processa automaticamente novos uploads")
                        if auto_process and 'auto_process_enabled' not in st.session_state:
                            st.session_state.auto_process_enabled = True
                            st.rerun()
                    
                    with col3:
                        if st.button("üìä Ver Detalhes", 
                                   use_container_width=True,
                                   help="Ver detalhes dos uploads pendentes"):
                            st.session_state.show_pending_details = not st.session_state.get('show_pending_details', False)
                            st.rerun()
                    
                    # Exibir detalhes se solicitado
                    if st.session_state.get('show_pending_details', False):
                        st.markdown("**üìã Uploads Pendentes:**")
                        for upload in uploads:
                            with st.container():
                                col1, col2, col3 = st.columns([3, 2, 1])
                                
                                with col1:
                                    st.write(f"üìÅ **{upload.get('filename', 'Arquivo desconhecido')}**")
                                    st.caption(f"ID: {upload.get('upload_id', 'N/A')}")
                                
                                with col2:
                                    st.write(f"üìä Tipo: {upload.get('data_type', 'Desconhecido').title()}")
                                    st.caption(f"Formato: {upload.get('file_format', 'N/A').upper()}")
                                
                                with col3:
                                    if st.button("‚ñ∂Ô∏è", 
                                               key=f"process_{upload.get('upload_id')}",
                                               help="Processar este upload"):
                                        self._process_single_upload(upload.get('upload_id'))
                                
                                st.markdown("---")
                else:
                    st.success("‚úÖ **Todos os uploads est√£o processados!**")
                    st.info("üí° Novos uploads aparecer√£o aqui automaticamente.")
            else:
                st.error("‚ùå Erro ao verificar uploads pendentes.")
        
        except Exception as e:
            st.error(f"‚ùå Erro ao buscar uploads pendentes: {str(e)}")

    def _process_all_pending_uploads(self) -> None:
        """Processa todos os uploads pendentes."""
        with st.spinner("‚öôÔ∏è Processando todos os uploads pendentes..."):
            try:
                result, success = self.api_client.process_pending_uploads()
                
                if success and result:
                    if not result.get("error"):
                        processed_count = result.get("processed_count", 0)
                        error_count = result.get("error_count", 0)
                        
                        if processed_count > 0:
                            st.success(f"‚úÖ **{processed_count} upload(s) processado(s) com sucesso!**")
                        
                        if error_count > 0:
                            st.warning(f"‚ö†Ô∏è **{error_count} upload(s) falharam no processamento.**")
                        
                        # Mostrar resultados detalhados
                        if result.get("results"):
                            st.markdown("**üìä Resultados do Processamento:**")
                            for res in result.get("results", []):
                                status_icon = "‚úÖ" if res.get("status") == "completed" else "‚ùå"
                                st.write(f"{status_icon} {res.get('filename', 'Arquivo desconhecido')}")
                        
                        # Aguardar um pouco e atualizar
                        time.sleep(2)
                        st.rerun()
                    else:
                        st.error(f"‚ùå Erro no processamento: {result.get('error')}")
                else:
                    st.error("‚ùå Falha na comunica√ß√£o com o servidor.")
                    
            except Exception as e:
                st.error(f"‚ùå Erro inesperado: {str(e)}")

    def _process_single_upload(self, upload_id: str) -> None:
        """Processa um upload espec√≠fico."""
        if not upload_id:
            st.error("‚ùå ID do upload inv√°lido.")
            return
        
        with st.spinner(f"‚öôÔ∏è Processando upload {upload_id[:8]}..."):
            try:
                result, success = self.api_client.process_single_upload(upload_id)
                
                if success and result:
                    if result.get("success", False):
                        st.success(f"‚úÖ **Upload processado:** {result.get('filename', 'Arquivo desconhecido')}")
                        # Aguardar um pouco e atualizar
                        time.sleep(1)
                        st.rerun()
                    else:
                        error_msg = result.get("error", "Erro desconhecido")
                        st.error(f"‚ùå **Falha no processamento:** {error_msg}")
                else:
                    st.error("‚ùå Falha na comunica√ß√£o com o servidor.")
                    
            except Exception as e:
                st.error(f"‚ùå Erro inesperado: {str(e)}")
    
    def _render_upload_table(self, uploads: List[Dict], status_filter: str) -> None:
        """
        Renderiza tabela com hist√≥rico de uploads.
        
        Args:
            uploads: Lista de uploads
            status_filter: Filtro de status aplicado
        """
        # Filtra por status se necess√°rio
        if status_filter != "Todos":
            uploads = [u for u in uploads if u.get("status") == status_filter]
        
        if not uploads:
            st.info(f"üì≠ Nenhum upload encontrado com status '{status_filter}'.")
            return
        
        # Exibe estat√≠sticas r√°pidas
        self._render_upload_stats(uploads)
        
        st.markdown("---")
        
        # Renderiza cada upload como um card
        for upload in uploads:
            self._render_upload_card(upload)
    
    def _render_upload_stats(self, uploads: List[Dict]) -> None:
        """
        Renderiza estat√≠sticas r√°pidas dos uploads.
        
        Args:
            uploads: Lista de uploads
        """
        # Calcula estat√≠sticas
        total = len(uploads)
        completed = len([u for u in uploads if u.get("status") == "completed"])
        failed = len([u for u in uploads if u.get("status") == "failed"])
        processing = len([u for u in uploads if u.get("status") == "processing"])
        
        # Exibe m√©tricas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total", total)
        
        with col2:
            st.metric("Conclu√≠dos", completed, delta=f"{(completed/total*100):.1f}%" if total > 0 else "0%")
        
        with col3:
            st.metric("Processando", processing)
        
        with col4:
            st.metric("Falhas", failed, delta=f"{(failed/total*100):.1f}%" if total > 0 else "0%")
    
    def _render_upload_card(self, upload: Dict) -> None:
        """
        Renderiza um card para um upload espec√≠fico.
        
        Args:
            upload: Dados do upload
        """
        # Mapeamento de status para emojis e cores
        status_info = {
            "uploaded": {"emoji": "üì§", "color": "blue", "label": "Aguardando"},
            "processing": {"emoji": "‚öôÔ∏è", "color": "orange", "label": "Processando"},
            "completed": {"emoji": "‚úÖ", "color": "green", "label": "Conclu√≠do"},
            "failed": {"emoji": "‚ùå", "color": "red", "label": "Falhou"}
        }
        
        status = upload.get("status", "unknown")
        info = status_info.get(status, {"emoji": "‚ùì", "color": "gray", "label": "Desconhecido"})
        
        # Container do card
        with st.container():
            # Header do card
            col1, col2, col3 = st.columns([3, 1, 1])
            
            with col1:
                st.markdown(f"**üìÅ {upload.get('filename', 'Arquivo desconhecido')}**")
                
            with col2:
                st.markdown(f"**{info['emoji']} {info['label']}**")
                
            with col3:
                upload_id = upload.get("upload_id", "")
                if upload_id:
                    # Se o upload est√° pendente, mostrar bot√£o de processamento
                    if status == "uploaded":
                        col_a, col_b, col_c = st.columns(3)
                        with col_a:
                            if st.button("‚ñ∂Ô∏è", key=f"process_card_{upload_id}", help="Processar agora"):
                                self._process_single_upload(upload_id)
                        with col_b:
                            if st.button("üîç", key=f"detail_{upload_id}", help="Ver detalhes r√°pidos"):
                                self._show_upload_details(upload)
                        with col_c:
                            if st.button("üìã", key=f"full_detail_{upload_id}", help="An√°lise completa"):
                                st.session_state.page_mode = "upload_details"
                                st.session_state.selected_upload_id = upload_id
                                st.rerun()
                    else:
                        col_a, col_b = st.columns(2)
                        with col_a:
                            if st.button("üîç", key=f"detail_{upload_id}", help="Ver detalhes r√°pidos"):
                                self._show_upload_details(upload)
                        with col_b:
                            if st.button("üìã", key=f"full_detail_{upload_id}", help="An√°lise completa"):
                                st.session_state.page_mode = "upload_details"
                                st.session_state.selected_upload_id = upload_id
                                st.rerun()
            
            # Informa√ß√µes principais
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.caption(f"üìÖ {upload.get('created_at', 'Data desconhecida')}")
                
            with col2:
                file_size = upload.get("file_size", 0)
                if file_size:
                    size_mb = file_size / (1024 * 1024)
                    st.caption(f"üìè {size_mb:.2f} MB")
                else:
                    st.caption("üìè Tamanho desconhecido")
                    
            with col3:
                records_valid = upload.get("records_valid")
                if records_valid is not None:
                    st.caption(f"üìä {records_valid} registros")
                else:
                    st.caption("üìä Processamento pendente")
            
            # Barra de progresso para uploads em processamento
            if status == "processing":
                progress = upload.get("progress_percentage", 0)
                st.progress(progress / 100)
                st.caption(f"Progresso: {progress}%")
            
            # Mensagem de erro se houver
            if status == "failed" and upload.get("error_message"):
                st.error(f"üí• {upload.get('error_message')}")
            
            st.markdown("---")
    
    def _show_upload_details(self, upload: Dict) -> None:
        """
        Exibe detalhes completos de um upload.
        
        Args:
            upload: Dados do upload
        """
        upload_id = upload.get("upload_id")
        
        if not upload_id:
            st.error("‚ùå ID do upload n√£o dispon√≠vel")
            return
        
        # Busca detalhes atualizados via API
        try:
            details, success = self.api_client.get_upload_status(upload_id)
            
            if success and details:
                # Exibe detalhes em um modal (usando expander)
                with st.expander(f"üìã Detalhes do Upload {upload_id}", expanded=True):
                    
                    # Informa√ß√µes b√°sicas
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("**üìÑ Informa√ß√µes do Arquivo:**")
                        st.write(f"‚Ä¢ Nome: {details.get('filename')}")
                        st.write(f"‚Ä¢ Tamanho: {details.get('file_size', 0) / (1024*1024):.2f} MB")
                        st.write(f"‚Ä¢ Tipo: {details.get('file_type', 'N√£o identificado')}")
                        
                    with col2:
                        st.markdown("**‚è±Ô∏è Timestamps:**")
                        st.write(f"‚Ä¢ Upload: {details.get('created_at', 'N/A')}")
                        st.write(f"‚Ä¢ In√≠cio: {details.get('started_at', 'N/A')}")
                        st.write(f"‚Ä¢ Conclus√£o: {details.get('completed_at', 'N/A')}")
                    
                    # Resultados do processamento
                    if details.get("records_processed"):
                        st.markdown("**üìä Resultados do Processamento:**")
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.metric("Total Processado", details.get("records_processed", 0))
                        with col2:
                            st.metric("Registros V√°lidos", details.get("records_valid", 0))
                        with col3:
                            st.metric("Registros Inv√°lidos", details.get("records_invalid", 0))
                    
                    # Tempo de processamento
                    processing_time = details.get("processing_time_seconds")
                    if processing_time:
                        st.metric("‚è∞ Tempo de Processamento", f"{processing_time:.2f}s")
                    
                    # Erro se houver
                    if details.get("error_message"):
                        st.error(f"üí• **Erro:** {details.get('error_message')}")
                        
            else:
                st.error("‚ùå N√£o foi poss√≠vel carregar detalhes do upload")
                
        except Exception as e:
            st.error(f"‚ùå Erro ao buscar detalhes: {str(e)}")


def render_upload_notifications_in_sidebar(api_client: APIClient) -> None:
    """
    Renderiza notifica√ß√µes de upload na sidebar da aplica√ß√£o.
    
    Args:
        api_client: Cliente da API
    """
    notification_component = RealTimeNotificationComponent(api_client)
    notification_component.render_sidebar_notifications()


def render_file_upload_page() -> None:
    """
    Renderiza a p√°gina completa de upload de arquivos com hist√≥rico.
    """
    # Verifica se APIClient est√° dispon√≠vel
    if not hasattr(st.session_state, 'api_client') or st.session_state.api_client is None:
        st.error("‚ùå Cliente da API n√£o est√° dispon√≠vel")
        return
    
    api_client = st.session_state.api_client
    
    # Verifica se deve mostrar p√°gina de detalhes
    if st.session_state.get("page_mode") == "upload_details":
        upload_id = st.session_state.get("selected_upload_id")
        if upload_id:
            render_upload_details_page(api_client, upload_id)
            return
        else:
            # Se n√£o h√° upload_id, volta para p√°gina principal
            st.session_state.page_mode = "upload"
    
    # Inicializa componente de notifica√ß√µes
    notification_component = RealTimeNotificationComponent(api_client)
    notification_component.initialize_notifications()
    
    # Header customizado
    if hasattr(st.session_state, 'theme_manager'):
        theme = st.session_state.theme_manager
        theme.create_custom_header(
            "Upload de Arquivos",
            "Envie arquivos de dados e acompanhe o processamento"
        )
    else:
        st.title("üì§ Upload de Arquivos")
    
    # Painel de notifica√ß√µes (sempre vis√≠vel se houver notifica√ß√µes)
    notification_component.render_notification_panel()
    
    # Status de uploads ativos
    notification_component.render_active_uploads_status()
    
    # Tabs para organizar upload e hist√≥rico
    tab1, tab2 = st.tabs(["üì§ Novo Upload", "üìã Hist√≥rico"])
    
    with tab1:
        # Interface de upload
        upload_component = FileUploadComponent(api_client)
        upload_result = upload_component.render()
        
        # Se houve upload bem-sucedido, adiciona ao monitoramento
        if upload_result and upload_result.get("success"):
            upload_id = upload_result.get("upload_id")
            if upload_id:
                notification_component.add_upload_to_monitoring(upload_id)
                st.success("üîî Upload adicionado ao monitoramento em tempo real!")
            
            st.balloons()  # Celebra√ß√£o visual
            
            # Bot√£o para ir ao hist√≥rico
            if st.button("üìã Ver no Hist√≥rico", type="secondary"):
                # For√ßa atualiza√ß√£o da p√°gina para mostrar no hist√≥rico
                st.rerun()
    
    with tab2:
        # Hist√≥rico de uploads
        history_component = UploadHistoryComponent(api_client)
        history_component.render()
    
    # Auto-refresh da p√°gina para polling (apenas se h√° uploads ativos)
    if st.session_state.get("active_uploads"):
        # Usa um placeholder invis√≠vel para for√ßar refresh peri√≥dico
        time.sleep(0.1)  # Pequena pausa para n√£o sobrecarregar
        st.rerun()


class RealTimeNotificationComponent:
    """Componente para notifica√ß√µes em tempo real de uploads."""
    
    def __init__(self, api_client: APIClient):
        """
        Inicializa o componente de notifica√ß√µes.
        
        Args:
            api_client: Cliente da API para comunica√ß√£o
        """
        self.api_client = api_client
        self.polling_interval = 5  # segundos
        self.max_notifications = 10
    
    def initialize_notifications(self) -> None:
        """Inicializa o sistema de notifica√ß√µes na sess√£o."""
        if "notifications" not in st.session_state:
            st.session_state.notifications = []
        
        if "active_uploads" not in st.session_state:
            st.session_state.active_uploads = set()
        
        if "last_notification_check" not in st.session_state:
            st.session_state.last_notification_check = datetime.now()
    
    def add_upload_to_monitoring(self, upload_id: str) -> None:
        """
        Adiciona um upload para monitoramento em tempo real.
        
        Args:
            upload_id: ID do upload para monitorar
        """
        self.initialize_notifications()
        st.session_state.active_uploads.add(upload_id)
    
    def check_for_updates(self) -> None:
        """Verifica atualiza√ß√µes nos uploads ativos."""
        self.initialize_notifications()
        
        # Verifica se j√° passou tempo suficiente desde a √∫ltima verifica√ß√£o
        now = datetime.now()
        if (now - st.session_state.last_notification_check).seconds < self.polling_interval:
            return
        
        st.session_state.last_notification_check = now
        
        # Verifica cada upload ativo
        completed_uploads = set()
        
        for upload_id in st.session_state.active_uploads.copy():
            try:
                status_data, success = self.api_client.get_upload_status(upload_id)
                
                if success and status_data:
                    status = status_data.get("status")
                    filename = status_data.get("filename", "Arquivo desconhecido")
                    
                    # Verifica se houve mudan√ßa de status
                    if status in ["completed", "failed"]:
                        self._add_notification(upload_id, status, filename, status_data)
                        completed_uploads.add(upload_id)
                    
                    elif status == "processing":
                        # Notifica√ß√£o de progresso se dispon√≠vel
                        progress = status_data.get("progress_percentage", 0)
                        # Verificar se progress n√£o √© None antes da compara√ß√£o
                        if progress is not None and progress > 0 and progress % 25 == 0:  # Notifica a cada 25%
                            self._add_progress_notification(upload_id, filename, progress)
                            
            except Exception as e:
                # Remove upload com erro do monitoramento
                completed_uploads.add(upload_id)
                self._add_error_notification(upload_id, str(e))
        
        # Remove uploads conclu√≠dos do monitoramento
        st.session_state.active_uploads -= completed_uploads
    
    def _add_notification(self, upload_id: str, status: str, filename: str, status_data: Dict) -> None:
        """
        Adiciona uma notifica√ß√£o de status.
        
        Args:
            upload_id: ID do upload
            status: Status atual
            filename: Nome do arquivo
            status_data: Dados completos do status
        """
        notification = {
            "id": f"notif_{upload_id}_{int(time.time())}",
            "upload_id": upload_id,
            "type": "status_change",
            "status": status,
            "filename": filename,
            "timestamp": datetime.now(),
            "message": self._get_status_message(status, filename, status_data),
            "icon": self._get_status_icon(status),
            "color": self._get_status_color(status)
        }
        
        st.session_state.notifications.insert(0, notification)
        self._trim_notifications()
    
    def _add_progress_notification(self, upload_id: str, filename: str, progress: int) -> None:
        """
        Adiciona notifica√ß√£o de progresso.
        
        Args:
            upload_id: ID do upload
            filename: Nome do arquivo
            progress: Percentual de progresso
        """
        notification = {
            "id": f"progress_{upload_id}_{progress}",
            "upload_id": upload_id,
            "type": "progress",
            "progress": progress,
            "filename": filename,
            "timestamp": datetime.now(),
            "message": f"üìä {filename} - {progress}% processado",
            "icon": "‚öôÔ∏è",
            "color": "orange"
        }
        
        st.session_state.notifications.insert(0, notification)
        self._trim_notifications()
    
    def _add_error_notification(self, upload_id: str, error_message: str) -> None:
        """
        Adiciona notifica√ß√£o de erro.
        
        Args:
            upload_id: ID do upload
            error_message: Mensagem de erro
        """
        notification = {
            "id": f"error_{upload_id}_{int(time.time())}",
            "upload_id": upload_id,
            "type": "error",
            "timestamp": datetime.now(),
            "message": f"‚ùå Erro ao monitorar upload: {error_message[:100]}",
            "icon": "‚ö†Ô∏è",
            "color": "red"
        }
        
        st.session_state.notifications.insert(0, notification)
        self._trim_notifications()
    
    def _get_status_message(self, status: str, filename: str, status_data: Dict) -> str:
        """
        Gera mensagem baseada no status.
        
        Args:
            status: Status do upload
            filename: Nome do arquivo
            status_data: Dados do status
            
        Returns:
            Mensagem formatada
        """
        if status == "completed":
            records = status_data.get("records_valid", 0)
            return f"‚úÖ {filename} processado com sucesso! {records} registros v√°lidos."
        
        elif status == "failed":
            error = status_data.get("error_message", "Erro desconhecido")
            return f"‚ùå Falha no processamento de {filename}: {error[:100]}"
        
        return f"üì§ Status de {filename} alterado para {status}"
    
    def _get_status_icon(self, status: str) -> str:
        """Retorna √≠cone para o status."""
        icons = {
            "completed": "‚úÖ",
            "failed": "‚ùå",
            "processing": "‚öôÔ∏è",
            "uploaded": "üì§"
        }
        return icons.get(status, "üìã")
    
    def _get_status_color(self, status: str) -> str:
        """Retorna cor para o status."""
        colors = {
            "completed": "green",
            "failed": "red",
            "processing": "orange",
            "uploaded": "blue"
        }
        return colors.get(status, "gray")
    
    def _trim_notifications(self) -> None:
        """Limita o n√∫mero de notifica√ß√µes armazenadas."""
        if len(st.session_state.notifications) > self.max_notifications:
            st.session_state.notifications = st.session_state.notifications[:self.max_notifications]
    
    def render_notification_panel(self) -> None:
        """Renderiza painel de notifica√ß√µes."""
        self.check_for_updates()
        
        if not st.session_state.get("notifications", []):
            return
        
        # Painel de notifica√ß√µes
        with st.container():
            st.markdown("### üîî Notifica√ß√µes Recentes")
            
            # Controles do painel
            col1, col2, col3 = st.columns([2, 1, 1])
            
            with col1:
                show_all = st.checkbox("Mostrar todas as notifica√ß√µes", value=False)
            
            with col2:
                if st.button("üîÑ Verificar Agora", help="For√ßa verifica√ß√£o de atualiza√ß√µes"):
                    st.session_state.last_notification_check = datetime.now() - timedelta(seconds=self.polling_interval)
                    st.rerun()
            
            with col3:
                if st.button("üóëÔ∏è Limpar", help="Remove todas as notifica√ß√µes"):
                    st.session_state.notifications = []
                    st.rerun()
            
            # Lista de notifica√ß√µes
            notifications_to_show = st.session_state.notifications if show_all else st.session_state.notifications[:5]
            
            for notification in notifications_to_show:
                self._render_notification_item(notification)
    
    def _render_notification_item(self, notification: Dict) -> None:
        """
        Renderiza um item de notifica√ß√£o.
        
        Args:
            notification: Dados da notifica√ß√£o
        """
        # Calcula tempo relativo
        time_diff = datetime.now() - notification["timestamp"]
        if time_diff.seconds < 60:
            time_str = f"{time_diff.seconds}s atr√°s"
        elif time_diff.seconds < 3600:
            time_str = f"{time_diff.seconds // 60}m atr√°s"
        else:
            time_str = notification["timestamp"].strftime("%H:%M")
        
        # Container da notifica√ß√£o
        with st.container():
            col1, col2 = st.columns([4, 1])
            
            with col1:
                # Mensagem principal
                st.markdown(f"**{notification['icon']} {notification['message']}**")
                
                # Barra de progresso para notifica√ß√µes de progresso
                if notification.get("type") == "progress":
                    progress = notification.get("progress", 0)
                    st.progress(progress / 100)
            
            with col2:
                st.caption(time_str)
            
            st.markdown("---")
    
    def render_active_uploads_status(self) -> None:
        """Renderiza status dos uploads ativos."""
        self.initialize_notifications()
        
        if not st.session_state.active_uploads:
            return
        
        st.markdown("### ‚öôÔ∏è Uploads em Processamento")
        
        for upload_id in list(st.session_state.active_uploads):
            try:
                status_data, success = self.api_client.get_upload_status(upload_id)
                
                if success and status_data:
                    self._render_active_upload_card(upload_id, status_data)
                else:
                    # Remove upload que n√£o conseguimos consultar
                    st.session_state.active_uploads.discard(upload_id)
                    
            except Exception:
                # Remove upload com erro
                st.session_state.active_uploads.discard(upload_id)
    
    def _render_active_upload_card(self, upload_id: str, status_data: Dict) -> None:
        """
        Renderiza card de upload ativo.
        
        Args:
            upload_id: ID do upload
            status_data: Dados do status
        """
        filename = status_data.get("filename", "Arquivo desconhecido")
        status = status_data.get("status", "unknown")
        progress = status_data.get("progress_percentage", 0)
        
        with st.container():
            col1, col2, col3 = st.columns([3, 1, 1])
            
            with col1:
                st.markdown(f"**üìÅ {filename}**")
                if progress > 0:
                    st.progress(progress / 100)
                    st.caption(f"Progresso: {progress}%")
            
            with col2:
                status_icon = self._get_status_icon(status)
                st.markdown(f"**{status_icon} {status.title()}**")
            
            with col3:
                if st.button("‚ùå", key=f"stop_{upload_id}", help="Parar monitoramento"):
                    st.session_state.active_uploads.discard(upload_id)
                    st.rerun()
            
            st.markdown("---")
    
    def render_sidebar_notifications(self) -> None:
        """Renderiza notifica√ß√µes compactas na sidebar."""
        self.check_for_updates()
        
        # Contador de uploads ativos
        active_count = len(st.session_state.get("active_uploads", set()))
        
        if active_count > 0:
            st.sidebar.markdown("---")
            st.sidebar.markdown(f"### ‚öôÔ∏è Uploads Ativos ({active_count})")
            
            # Mostra apenas os uploads em processamento
            for upload_id in list(st.session_state.active_uploads):
                try:
                    status_data, success = self.api_client.get_upload_status(upload_id)
                    
                    if success and status_data:
                        filename = status_data.get("filename", "Arquivo")[:20] + "..."
                        progress = status_data.get("progress_percentage", 0)
                        status = status_data.get("status", "unknown")
                        
                        # Card compacto na sidebar
                        st.sidebar.markdown(f"**üìÅ {filename}**")
                        if progress > 0:
                            st.sidebar.progress(progress / 100)
                            st.sidebar.caption(f"{status.title()} - {progress}%")
                        else:
                            st.sidebar.caption(f"Status: {status.title()}")
                        
                except Exception:
                    continue
        
        # Notifica√ß√µes recentes (m√°ximo 3 na sidebar)
        recent_notifications = st.session_state.get("notifications", [])[:3]
        
        if recent_notifications:
            st.sidebar.markdown("---")
            st.sidebar.markdown("### üîî √öltimas Notifica√ß√µes")
            
            for notification in recent_notifications:
                # Vers√£o compacta da notifica√ß√£o
                icon = notification.get("icon", "üìã")
                message = notification.get("message", "")[:50] + "..."
                
                # Cor baseada no tipo
                if notification.get("type") == "error" or notification.get("status") == "failed":
                    st.sidebar.error(f"{icon} {message}")
                elif notification.get("status") == "completed":
                    st.sidebar.success(f"{icon} {message}")
                else:
                    st.sidebar.info(f"{icon} {message}")
    
    def get_notification_summary(self) -> Dict[str, int]:
        """
        Retorna resumo das notifica√ß√µes para exibi√ß√£o.
        
        Returns:
            Dict com contadores de notifica√ß√µes
        """
        notifications = st.session_state.get("notifications", [])
        
        summary = {
            "total": len(notifications),
            "completed": 0,
            "failed": 0,
            "progress": 0,
            "active_uploads": len(st.session_state.get("active_uploads", set()))
        }
        
        for notification in notifications:
            if notification.get("status") == "completed":
                summary["completed"] += 1
            elif notification.get("status") == "failed":
                summary["failed"] += 1
            elif notification.get("type") == "progress":
                summary["progress"] += 1
        
        return summary


class UploadDetailsPage:
    """P√°gina dedicada para detalhes avan√ßados de upload com logs e estat√≠sticas."""
    
    def __init__(self, api_client: APIClient):
        """
        Inicializa a p√°gina de detalhes.
        
        Args:
            api_client: Cliente da API para comunica√ß√£o
        """
        self.api_client = api_client
    
    def render(self, upload_id: str) -> None:
        """
        Renderiza p√°gina completa de detalhes do upload.
        
        Args:
            upload_id: ID do upload para exibir detalhes
        """
        # Header customizado
        if hasattr(st.session_state, 'theme_manager'):
            theme = st.session_state.theme_manager
            theme.create_custom_header(
                f"Detalhes do Upload",
                f"An√°lise completa do processamento ‚Ä¢ ID: {upload_id}"
            )
        else:
            st.title(f"üìã Detalhes do Upload")
            st.caption(f"ID: {upload_id}")
        
        # Busca dados do upload
        try:
            details, success = self.api_client.get_upload_status(upload_id)
            
            if not success or not details:
                st.error("‚ùå Upload n√£o encontrado ou erro ao carregar dados")
                if st.button("‚¨ÖÔ∏è Voltar ao Hist√≥rico"):
                    st.session_state.page_mode = "upload"
                    st.rerun()
                return
            
            # Bot√£o voltar
            col1, col2 = st.columns([1, 4])
            with col1:
                if st.button("‚¨ÖÔ∏è Voltar", type="secondary"):
                    st.session_state.page_mode = "upload"
                    st.rerun()
            
            # Tabs para organizar informa√ß√µes
            tab1, tab2, tab3, tab4 = st.tabs([
                "üìä Vis√£o Geral", 
                "üìà M√©tricas Detalhadas", 
                "üìù Logs de Processamento",
                "üîç An√°lise T√©cnica"
            ])
            
            with tab1:
                self._render_overview(details)
            
            with tab2:
                self._render_detailed_metrics(details)
            
            with tab3:
                self._render_processing_logs(upload_id, details)
            
            with tab4:
                self._render_technical_analysis(details)
                
        except Exception as e:
            st.error(f"‚ùå Erro ao carregar detalhes: {str(e)}")
    
    def _render_overview(self, details: Dict) -> None:
        """Renderiza vis√£o geral do upload."""
        st.subheader("üìã Informa√ß√µes Gerais")
        
        # Status principal
        status = details.get("status", "unknown")
        status_icons = {
            "uploaded": "üì§",
            "processing": "‚öôÔ∏è", 
            "completed": "‚úÖ",
            "failed": "‚ùå"
        }
        
        status_colors = {
            "uploaded": "blue",
            "processing": "orange",
            "completed": "green", 
            "failed": "red"
        }
        
        icon = status_icons.get(status, "‚ùì")
        color = status_colors.get(status, "gray")
        
        st.markdown(f"### {icon} Status: **{status.title()}**")
        
        # Informa√ß√µes principais em cards
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "üìÅ Arquivo",
                details.get("filename", "N/A"),
                help="Nome do arquivo original"
            )
        
        with col2:
            file_size = details.get("file_size", 0)
            size_mb = file_size / (1024 * 1024) if file_size else 0
            st.metric(
                "üìè Tamanho", 
                f"{size_mb:.2f} MB",
                help="Tamanho do arquivo em megabytes"
            )
        
        with col3:
            progress = details.get("progress_percentage", 0)
            st.metric(
                "üìä Progresso",
                f"{progress}%",
                help="Percentual de conclus√£o do processamento"
            )
        
        with col4:
            processing_time = details.get("processing_time_seconds")
            if processing_time:
                st.metric(
                    "‚è±Ô∏è Tempo",
                    f"{processing_time:.2f}s",
                    help="Tempo total de processamento"
                )
            else:
                st.metric("‚è±Ô∏è Tempo", "N/A", help="Processamento n√£o iniciado ou em andamento")
        
        # Timeline do processamento
        st.subheader("‚è∞ Timeline do Processamento")
        
        timeline_data = []
        
        # Upload
        created_at = details.get("created_at")
        if created_at:
            timeline_data.append(("üì§ Upload", created_at, "Arquivo enviado com sucesso"))
        
        # In√≠cio do processamento
        started_at = details.get("started_at")
        if started_at:
            timeline_data.append(("‚öôÔ∏è In√≠cio", started_at, "Processamento iniciado"))
        
        # Conclus√£o
        completed_at = details.get("completed_at")
        if completed_at:
            if status == "completed":
                timeline_data.append(("‚úÖ Conclus√£o", completed_at, "Processamento conclu√≠do com sucesso"))
            elif status == "failed":
                timeline_data.append(("‚ùå Falha", completed_at, "Processamento falhou"))
        
        # Renderizar timeline
        for i, (event, timestamp, description) in enumerate(timeline_data):
            col1, col2, col3 = st.columns([1, 2, 3])
            with col1:
                st.write(event)
            with col2:
                st.write(timestamp)
            with col3:
                st.write(description)
            
            if i < len(timeline_data) - 1:
                st.write("‚Üì")
        
        # Erro se houver
        error_message = details.get("error_message")
        if error_message:
            st.subheader("üí• Erro Encontrado")
            st.error(error_message)
    
    def _render_detailed_metrics(self, details: Dict) -> None:
        """Renderiza m√©tricas detalhadas."""
        st.subheader("üìà M√©tricas de Processamento")
        
        # M√©tricas de registros
        records_processed = details.get("records_processed", 0)
        records_valid = details.get("records_valid", 0)
        records_invalid = details.get("records_invalid", 0)
        
        if records_processed > 0:
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "üìä Total Processado",
                    f"{records_processed:,}",
                    help="N√∫mero total de registros processados"
                )
            
            with col2:
                valid_percentage = (records_valid / records_processed * 100) if records_processed > 0 else 0
                st.metric(
                    "‚úÖ Registros V√°lidos",
                    f"{records_valid:,}",
                    delta=f"{valid_percentage:.1f}%",
                    help="Registros que passaram na valida√ß√£o"
                )
            
            with col3:
                invalid_percentage = (records_invalid / records_processed * 100) if records_processed > 0 else 0
                st.metric(
                    "‚ùå Registros Inv√°lidos",
                    f"{records_invalid:,}",
                    delta=f"{invalid_percentage:.1f}%",
                    delta_color="inverse",
                    help="Registros que falharam na valida√ß√£o"
                )
            
            # Gr√°fico de distribui√ß√£o
            st.subheader("üìä Distribui√ß√£o de Registros")
            
            if records_valid > 0 or records_invalid > 0:
                import pandas as pd
                
                chart_data = pd.DataFrame({
                    'Tipo': ['V√°lidos', 'Inv√°lidos'],
                    'Quantidade': [records_valid, records_invalid],
                    'Percentual': [valid_percentage, invalid_percentage]
                })
                
                st.bar_chart(chart_data.set_index('Tipo')['Quantidade'])
                
                # Tabela detalhada
                st.dataframe(
                    chart_data,
                    use_container_width=True,
                    hide_index=True
                )
        else:
            st.info("üì≠ Nenhum registro foi processado ainda")
        
        # M√©tricas de performance
        st.subheader("‚ö° M√©tricas de Performance")
        
        processing_time = details.get("processing_time_seconds")
        if processing_time and records_processed > 0:
            records_per_second = records_processed / processing_time
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric(
                    "üöÄ Registros/segundo",
                    f"{records_per_second:.2f}",
                    help="Taxa de processamento"
                )
            
            with col2:
                file_size = details.get("file_size", 0)
                if file_size > 0:
                    mb_per_second = (file_size / (1024 * 1024)) / processing_time
                    st.metric(
                        "üìà MB/segundo",
                        f"{mb_per_second:.2f}",
                        help="Taxa de processamento de dados"
                    )
    
    def _render_processing_logs(self, upload_id: str, details: Dict) -> None:
        """Renderiza logs de processamento."""
        st.subheader("üìù Logs de Processamento")
        
        # Simula√ß√£o de logs (em implementa√ß√£o real, buscaria do sistema de logs)
        logs = self._get_upload_logs(upload_id, details)
        
        # Filtros de logs
        col1, col2, col3 = st.columns([2, 2, 1])
        
        with col1:
            log_level = st.selectbox(
                "N√≠vel de Log:",
                ["TODOS", "INFO", "WARNING", "ERROR", "DEBUG"],
                help="Filtrar logs por n√≠vel"
            )
        
        with col2:
            show_timestamps = st.checkbox("Mostrar timestamps", value=True)
        
        with col3:
            if st.button("üîÑ Atualizar"):
                st.rerun()
        
        # Exibir logs
        if logs:
            log_container = st.container()
            
            with log_container:
                for log_entry in logs:
                    if log_level != "TODOS" and log_entry["level"] != log_level:
                        continue
                    
                    # Cor baseada no n√≠vel
                    if log_entry["level"] == "ERROR":
                        st.error(self._format_log_entry(log_entry, show_timestamps))
                    elif log_entry["level"] == "WARNING":
                        st.warning(self._format_log_entry(log_entry, show_timestamps))
                    elif log_entry["level"] == "INFO":
                        st.info(self._format_log_entry(log_entry, show_timestamps))
                    else:
                        st.text(self._format_log_entry(log_entry, show_timestamps))
        else:
            st.info("üì≠ Nenhum log dispon√≠vel para este upload")
    
    def _render_technical_analysis(self, details: Dict) -> None:
        """Renderiza an√°lise t√©cnica avan√ßada."""
        st.subheader("üîç An√°lise T√©cnica")
        
        # Informa√ß√µes do arquivo
        st.markdown("**üìÑ Detalhes do Arquivo:**")
        
        file_info = {
            "Nome Original": details.get("filename", "N/A"),
            "Tamanho": f"{details.get('file_size', 0) / (1024*1024):.2f} MB",
            "Tipo Detectado": details.get("file_type", "N/A"),
            "Status": details.get("status", "N/A")
        }
        
        for key, value in file_info.items():
            st.write(f"‚Ä¢ **{key}:** {value}")
        
        # Timestamps detalhados
        st.markdown("**‚è∞ Timestamps Detalhados:**")
        
        timestamps = {
            "Upload": details.get("created_at", "N/A"),
            "In√≠cio do Processamento": details.get("started_at", "N/A"),
            "Conclus√£o": details.get("completed_at", "N/A")
        }
        
        for key, value in timestamps.items():
            st.write(f"‚Ä¢ **{key}:** {value}")
        
        # C√°lculos de performance
        processing_time = details.get("processing_time_seconds")
        if processing_time:
            st.markdown("**‚ö° An√°lise de Performance:**")
            
            records_processed = details.get("records_processed", 0)
            file_size = details.get("file_size", 0)
            
            performance_metrics = {
                "Tempo Total": f"{processing_time:.3f} segundos",
                "Taxa de Registros": f"{records_processed / processing_time:.2f} registros/segundo" if records_processed > 0 else "N/A",
                "Taxa de Dados": f"{(file_size / (1024*1024)) / processing_time:.2f} MB/segundo" if file_size > 0 else "N/A",
                "Efici√™ncia": self._calculate_efficiency(details)
            }
            
            for key, value in performance_metrics.items():
                st.write(f"‚Ä¢ **{key}:** {value}")
        
        # Dados brutos (JSON)
        with st.expander("üîß Dados Brutos (JSON)", expanded=False):
            st.json(details)
    
    def _get_upload_logs(self, upload_id: str, details: Dict) -> List[Dict]:
        """
        Simula busca de logs de upload.
        Em implementa√ß√£o real, buscaria do sistema de logs.
        """
        # Simula√ß√£o de logs baseada no status
        logs = []
        
        status = details.get("status", "unknown")
        filename = details.get("filename", "arquivo.csv")
        
        # Log de upload
        logs.append({
            "timestamp": details.get("created_at", "2024-01-01T00:00:00"),
            "level": "INFO",
            "message": f"Upload iniciado para arquivo: {filename}",
            "module": "upload_endpoint"
        })
        
        # Log de valida√ß√£o
        logs.append({
            "timestamp": details.get("created_at", "2024-01-01T00:00:01"),
            "level": "INFO", 
            "message": f"Arquivo validado com sucesso: {filename}",
            "module": "data_processor"
        })
        
        if details.get("started_at"):
            # Log de in√≠cio de processamento
            logs.append({
                "timestamp": details.get("started_at"),
                "level": "INFO",
                "message": f"Iniciando processamento: {upload_id}",
                "module": "upload_monitor"
            })
            
            # Logs de progresso
            records_processed = details.get("records_processed", 0)
            if records_processed > 0:
                logs.append({
                    "timestamp": details.get("started_at"),
                    "level": "INFO",
                    "message": f"Processando registros... Total encontrado: {records_processed}",
                    "module": "data_processor"
                })
        
        if status == "completed":
            logs.append({
                "timestamp": details.get("completed_at"),
                "level": "INFO",
                "message": f"Upload processado com sucesso: {upload_id} - {details.get('records_valid', 0)} registros v√°lidos",
                "module": "upload_monitor"
            })
        elif status == "failed":
            logs.append({
                "timestamp": details.get("completed_at"),
                "level": "ERROR", 
                "message": f"Erro ao processar upload {upload_id}: {details.get('error_message', 'Erro desconhecido')}",
                "module": "upload_monitor"
            })
        
        return logs
    
    def _format_log_entry(self, log_entry: Dict, show_timestamps: bool) -> str:
        """Formata entrada de log para exibi√ß√£o."""
        timestamp = log_entry.get("timestamp", "")
        level = log_entry.get("level", "INFO")
        message = log_entry.get("message", "")
        module = log_entry.get("module", "")
        
        if show_timestamps:
            return f"[{timestamp}] {level} - {module} - {message}"
        else:
            return f"{level} - {module} - {message}"
    
    def _calculate_efficiency(self, details: Dict) -> str:
        """Calcula efici√™ncia do processamento."""
        records_processed = details.get("records_processed", 0)
        records_valid = details.get("records_valid", 0)
        processing_time = details.get("processing_time_seconds", 0)
        
        if records_processed == 0 or processing_time == 0:
            return "N/A"
        
        # Efici√™ncia baseada em registros v√°lidos por segundo
        efficiency = records_valid / processing_time
        
        if efficiency > 100:
            return "Excelente"
        elif efficiency > 50:
            return "Boa"
        elif efficiency > 20:
            return "Regular"
        else:
            return "Baixa"


def render_upload_details_page(api_client: APIClient, upload_id: str) -> None:
    """
    Renderiza p√°gina dedicada de detalhes de upload.
    
    Args:
        api_client: Cliente da API
        upload_id: ID do upload para exibir
    """
    details_page = UploadDetailsPage(api_client)
    details_page.render(upload_id) 