#!/bin/bash
# entrypoint.sh
# Script principal para inicializa√ß√£o autom√°tica do container PROAtivo

set -e

echo "üöÄ INICIANDO PROATIVO - AUTOMA√á√ÉO COMPLETA"
echo "=========================================="

# Configura√ß√µes
POSTGRES_HOST="${POSTGRES_HOST:-postgres}"
PYTHON_PATH="/app"
POPULATE_TIMEOUT=300  # 5 minutos timeout para popula√ß√£o

# Fun√ß√£o para log com timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Fun√ß√£o para executar com timeout
run_with_timeout() {
    local timeout=$1
    local command=$2
    local description=$3
    
    log "‚è≥ Executando: $description"
    timeout $timeout bash -c "$command" || {
        log "‚ùå TIMEOUT ou ERRO em: $description"
        return 1
    }
    log "‚úÖ Conclu√≠do: $description"
}

# Determinar comando antes das etapas de setup
if [ "$1" = "streamlit" ]; then
    log "üé® MODO STREAMLIT - Pulando configura√ß√£o de banco"
    log "Streamlit se conectar√° via API em: $API_BASE_URL"
    cd $PYTHON_PATH
else
    # ETAPA 1: Aguardar PostgreSQL estar pronto (apenas para API)
    log "ETAPA 1: Aguardando PostgreSQL..."
    echo "Host: $POSTGRES_HOST"
    echo "Usu√°rio: $POSTGRES_USER"
    echo "Banco: $POSTGRES_DB"

    run_with_timeout 60 "
        until pg_isready -h $POSTGRES_HOST -p 5432 -U $POSTGRES_USER; do
            echo '‚è≥ PostgreSQL n√£o est√° pronto, aguardando...'
            sleep 2
        done
    " "Verifica√ß√£o PostgreSQL" || {
        log "‚ùå FALHA: PostgreSQL n√£o respondeu a tempo"
        exit 1
    }

    # ETAPA 2: Verificar se banco precisa ser populado
    log "ETAPA 2: Verificando necessidade de popula√ß√£o..."

    cd $PYTHON_PATH

    # ETAPA 3: Configura√ß√£o completa do banco (master script)
    log "ETAPA 3: Configura√ß√£o autom√°tica do banco..."

    # For√ßa a string de conex√£o correta para os scripts Python
    export database_url="postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}"
    export DATABASE_URL="postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}"

    log "üîó Usando conex√£o: $database_url"

    run_with_timeout $POPULATE_TIMEOUT "
        python3 scripts/setup/setup_complete_database.py
    " "Configura√ß√£o completa do banco" || {
        log "‚ùå FALHA na configura√ß√£o do banco"
        exit 1
    }
fi

# ETAPA 4: Iniciar aplica√ß√£o
log "ETAPA 4: Iniciando aplica√ß√£o PROAtivo..."
echo "=========================================="
log "üéâ SISTEMA PRONTO - Iniciando servi√ßos"
echo "API: http://localhost:8000"
echo "Streamlit: http://localhost:8501"
echo "=========================================="

# Determinar comando a executar baseado no argumento
if [ "$1" = "api" ] || [ "$1" = "" ]; then
    log "üöÄ Iniciando API FastAPI..."
    exec uvicorn main:app --host 0.0.0.0 --port 8000
elif [ "$1" = "streamlit" ]; then
    log "üöÄ Iniciando Streamlit..."
    cd src/frontend
    exec streamlit run app.py --server.address 0.0.0.0 --server.port 8501 --server.headless true
else
    log "üöÄ Executando comando customizado: $@"
    exec "$@"
fi 