"""
Endpoint para sistema de feedback de usu√°rios do PROAtivo.

Este m√≥dulo implementa endpoints para coletar feedback dos usu√°rios
sobre as respostas da IA, permitindo avalia√ß√µes üëç/üëé e coment√°rios.
"""

import logging
from datetime import datetime
from typing import Dict, Any, List
from uuid import UUID

from fastapi import APIRouter, Depends, HTTPException, status, BackgroundTasks
from sqlalchemy.ext.asyncio import AsyncSession

from ..models.chat import FeedbackRequest, FeedbackResponse
from ..dependencies import get_database_session, get_current_config
from ..config import Settings
from ...utils.error_handlers import ValidationError, DataProcessingError

# Configurar logging
logger = logging.getLogger(__name__)

# Criar router para endpoints de feedback
router = APIRouter(prefix="/feedback", tags=["feedback"])

# Armazenamento tempor√°rio em mem√≥ria para feedback (at√© implementar banco)
feedback_storage: Dict[str, Dict[str, Any]] = {}


async def process_feedback_metrics_background(
    feedback_data: Dict[str, Any]
) -> None:
    """
    Processa m√©tricas de feedback em background.
    
    Args:
        feedback_data: Dados do feedback para processamento
    """
    try:
        logger.info(
            f"Processing feedback metrics - "
            f"Helpful: {feedback_data['helpful']}, "
            f"Session: {feedback_data['session_id']}"
        )
        
        # TODO: Implementar an√°lise de sentimento no coment√°rio
        # TODO: Atualizar m√©tricas de qualidade da IA
        # TODO: Identificar padr√µes de feedback negativo
        
    except Exception as e:
        logger.error(f"Error processing feedback metrics: {str(e)}")


@router.post("/", response_model=FeedbackResponse)
async def submit_feedback(
    request: FeedbackRequest,
    background_tasks: BackgroundTasks,
    db: AsyncSession = Depends(get_database_session),
    settings: Settings = Depends(get_current_config),
) -> FeedbackResponse:
    """
    Submete feedback do usu√°rio sobre uma resposta da IA.
    
    Este endpoint permite aos usu√°rios:
    - Avaliar respostas com üëç (helpful=True) ou üëé (helpful=False)
    - Adicionar coment√°rios explicativos
    - Fornecer contexto adicional sobre problemas
    
    Args:
        request: Dados do feedback incluindo avalia√ß√£o e coment√°rio
        background_tasks: Tarefas em background do FastAPI
        db: Sess√£o do banco de dados
        settings: Configura√ß√µes da aplica√ß√£o
        
    Returns:
        FeedbackResponse: Confirma√ß√£o do feedback recebido
        
    Raises:
        HTTPException: Erro de valida√ß√£o ou processamento
    """
    try:
        logger.info(f"Receiving feedback for message {request.message_id} - Helpful: {request.helpful}")
        
        # Preparar dados do feedback
        feedback_data = {
            "feedback_id": str(request.message_id),
            "message_id": str(request.message_id),
            "session_id": str(request.session_id),
            "helpful": request.helpful,
            "comment": request.comment,
            "timestamp": datetime.now(),
            "rating": request.rating if hasattr(request, 'rating') else None,
            "category": request.category if hasattr(request, 'category') else None
        }
        
        # Armazenar feedback (temporariamente em mem√≥ria)
        feedback_storage[str(request.message_id)] = feedback_data
        
        logger.info(f"Feedback stored successfully for message {request.message_id}")
        
        # Processar m√©tricas em background
        background_tasks.add_task(
            process_feedback_metrics_background,
            feedback_data
        )
        
        # Criar resposta personalizada baseada no feedback
        if request.helpful:
            message = "Obrigado pelo feedback positivo! Continuaremos melhorando para atend√™-lo melhor."
        else:
            message = "Obrigado pelo feedback. Suas observa√ß√µes nos ajudam a melhorar nosso sistema."
            
        if request.comment:
            message += " Seu coment√°rio foi registrado e ser√° analisado pela nossa equipe."
        
        response = FeedbackResponse(
            message=message,
            timestamp=datetime.now()
        )
        
        logger.info(f"Feedback response sent for message {request.message_id}")
        return response
        
    except ValidationError as e:
        logger.warning(f"Validation error in feedback: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Erro de valida√ß√£o: {str(e)}"
        )
    
    except Exception as e:
        logger.error(f"Unexpected error in feedback endpoint: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno ao processar feedback"
        )


@router.get("/session/{session_id}")
async def get_session_feedback(
    session_id: UUID,
    settings: Settings = Depends(get_current_config)
) -> Dict[str, Any]:
    """
    Recupera todo o feedback de uma sess√£o espec√≠fica.
    
    Args:
        session_id: ID da sess√£o para recuperar feedback
        settings: Configura√ß√µes da aplica√ß√£o
        
    Returns:
        Dict com feedback da sess√£o
    """
    try:
        logger.info(f"Retrieving feedback for session: {session_id}")
        
        # Filtrar feedback por sess√£o
        session_feedback = {
            feedback_id: feedback_data
            for feedback_id, feedback_data in feedback_storage.items()
            if feedback_data.get("session_id") == str(session_id)
        }
        
        # Calcular estat√≠sticas
        total_feedback = len(session_feedback)
        positive_feedback = sum(1 for f in session_feedback.values() if f.get("helpful", False))
        negative_feedback = total_feedback - positive_feedback
        
        return {
            "session_id": str(session_id),
            "total_feedback": total_feedback,
            "positive_feedback": positive_feedback,
            "negative_feedback": negative_feedback,
            "satisfaction_rate": positive_feedback / total_feedback if total_feedback > 0 else 0,
            "feedback_items": list(session_feedback.values())
        }
        
    except Exception as e:
        logger.error(f"Error retrieving session feedback: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro ao recuperar feedback da sess√£o"
        )


@router.get("/stats")
async def get_feedback_stats(
    settings: Settings = Depends(get_current_config)
) -> Dict[str, Any]:
    """
    Retorna estat√≠sticas gerais do sistema de feedback.
    
    Args:
        settings: Configura√ß√µes da aplica√ß√£o
        
    Returns:
        Dict com estat√≠sticas de feedback
    """
    try:
        logger.info("Generating feedback statistics")
        
        if not feedback_storage:
            return {
                "total_feedback": 0,
                "satisfaction_rate": 0,
                "most_common_issues": [],
                "improvement_suggestions": []
            }
        
        # Calcular estat√≠sticas b√°sicas
        total_feedback = len(feedback_storage)
        positive_feedback = sum(1 for f in feedback_storage.values() if f.get("helpful", False))
        satisfaction_rate = positive_feedback / total_feedback if total_feedback > 0 else 0
        
        # Analisar coment√°rios negativos para identificar padr√µes
        negative_comments = [
            f.get("comment", "")
            for f in feedback_storage.values()
            if not f.get("helpful", True) and f.get("comment")
        ]
        
        # An√°lise simples de palavras-chave em coment√°rios negativos
        common_issues = []
        issue_keywords = {
            "informa√ß√£o incorreta": ["incorreto", "errado", "falso"],
            "resposta incompleta": ["incompleto", "faltou", "superficial"],
            "n√£o entendeu a pergunta": ["n√£o entendeu", "entendeu errado", "pergunta errada"],
            "lentid√£o": ["lento", "demora", "demorou"],
            "interface": ["dif√≠cil", "confuso", "interface"]
        }
        
        for issue, keywords in issue_keywords.items():
            count = sum(
                1 for comment in negative_comments
                if any(keyword in comment.lower() for keyword in keywords)
            )
            if count > 0:
                common_issues.append({"issue": issue, "count": count})
        
        # Ordenar por frequ√™ncia
        common_issues.sort(key=lambda x: x["count"], reverse=True)
        
        return {
            "total_feedback": total_feedback,
            "positive_feedback": positive_feedback,
            "negative_feedback": total_feedback - positive_feedback,
            "satisfaction_rate": round(satisfaction_rate, 3),
            "most_common_issues": common_issues[:5],
            "recent_feedback": list(feedback_storage.values())[-10:],  # √öltimos 10
            "improvement_suggestions": [
                "Melhorar precis√£o das respostas baseada no feedback",
                "Implementar detec√ß√£o de intent mais robusta",
                "Adicionar mais fontes de dados para respostas completas"
            ]
        }
        
    except Exception as e:
        logger.error(f"Error generating feedback stats: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro ao gerar estat√≠sticas de feedback"
        )


@router.delete("/session/{session_id}")
async def clear_session_feedback(
    session_id: UUID,
    settings: Settings = Depends(get_current_config)
) -> Dict[str, str]:
    """
    Remove todo o feedback de uma sess√£o espec√≠fica.
    
    Args:
        session_id: ID da sess√£o para limpar feedback
        settings: Configura√ß√µes da aplica√ß√£o
        
    Returns:
        Dict com confirma√ß√£o da opera√ß√£o
    """
    try:
        logger.info(f"Clearing feedback for session: {session_id}")
        
        # Remover feedback da sess√£o
        session_feedback_ids = [
            feedback_id
            for feedback_id, feedback_data in feedback_storage.items()
            if feedback_data.get("session_id") == str(session_id)
        ]
        
        for feedback_id in session_feedback_ids:
            del feedback_storage[feedback_id]
        
        logger.info(f"Cleared {len(session_feedback_ids)} feedback items for session {session_id}")
        
        return {
            "message": f"Feedback da sess√£o {session_id} removido com sucesso",
            "session_id": str(session_id),
            "items_removed": len(session_feedback_ids)
        }
        
    except Exception as e:
        logger.error(f"Error clearing session feedback: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro ao limpar feedback da sess√£o"
        )


@router.get("/message/{message_id}")
async def get_message_feedback(
    message_id: UUID,
    settings: Settings = Depends(get_current_config)
) -> Dict[str, Any]:
    """
    Recupera feedback espec√≠fico de uma mensagem.
    
    Args:
        message_id: ID da mensagem para recuperar feedback
        settings: Configura√ß√µes da aplica√ß√£o
        
    Returns:
        Dict com feedback da mensagem ou None se n√£o encontrado
    """
    try:
        logger.info(f"Retrieving feedback for message: {message_id}")
        
        feedback_data = feedback_storage.get(str(message_id))
        
        if not feedback_data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Feedback n√£o encontrado para esta mensagem"
            )
        
        return {
            "message_id": str(message_id),
            "feedback": feedback_data,
            "found": True
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error retrieving message feedback: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro ao recuperar feedback da mensagem"
        ) 