#!/usr/bin/env python3
"""
MASTER SCRIPT - Configura√ß√£o completa autom√°tica do banco PROAtivo.
Orquestra: cria√ß√£o de tabelas + popula√ß√£o de dados + verifica√ß√£o final.
"""

import asyncio
import sys
import os
from pathlib import Path

# Configurar paths
current_dir = Path(__file__).parent
project_dir = current_dir.parent.parent
sys.path.insert(0, str(project_dir))
os.environ['PYTHONPATH'] = str(project_dir)

from src.database.connection import db_connection, init_database


async def run_script(script_name, description):
    """Executa um script e retorna sucesso/falha."""
    print(f"\nüîÑ {description}")
    print("=" * 50)
    
    script_path = current_dir / script_name
    
    if not script_path.exists():
        print(f"‚ùå Script n√£o encontrado: {script_name}")
        return False
    
    try:
        # Importa e executa o script
        if script_name == "create_tables.py":
            from scripts.setup.create_tables import main as create_main
            success = await create_main()
        elif script_name == "populate_database.py":
            from scripts.setup.populate_database import main as populate_main
            success = await populate_main()
        elif script_name == "import_localidades_sap.py":
            from scripts.setup.import_localidades_sap import main as import_main
            success = await import_main()
        elif script_name == "correlate_equipment_locations.py":
            from scripts.setup.correlate_equipment_locations import main as correlate_main
            success = await correlate_main()
        elif script_name == "populate_pmm_2.py":
            from scripts.setup.populate_pmm_2 import main as populate_pmm_2_main
            success = await populate_pmm_2_main()
        elif script_name == "check_database.py":
            from scripts.setup.check_database import check_database_empty
            success = not await check_database_empty()  # Inverte l√≥gica: True se tem dados (sucesso)
        else:
            print(f"‚ùå Script n√£o reconhecido: {script_name}")
            return False
        
        if success:
            print(f"‚úÖ {description} - CONCLU√çDO")
            return True
        else:
            print(f"‚ùå {description} - FALHOU")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar {script_name}: {e}")
        return False


async def check_initial_status():
    """Verifica o status detalhado do banco e determina que a√ß√µes s√£o necess√°rias."""
    print("üîç VERIFICA√á√ÉO INICIAL")
    print("=" * 50)
    
    try:
        await init_database()
        
        from scripts.setup.check_database import check_database_status
        status = await check_database_status()
        
        # Determina se h√° tabelas que n√£o existem
        missing_tables = [table for table, info in status.items() if not info['table_exists']]
        
        # Determina se h√° tabelas que precisam ser populadas
        empty_tables = [table for table, info in status.items() if info['needs_population'] and info['table_exists']]
        
        # Calcula total de registros
        total_records = sum(table['count'] for table in status.values())
        
        # Determina o tipo de a√ß√£o necess√°ria
        if missing_tables:
            print("üîß Algumas tabelas n√£o existem - cria√ß√£o necess√°ria")
            return status, "missing_tables"
        elif total_records == 0:
            print("üí° Banco vazio - configura√ß√£o completa necess√°ria")
            return status, "empty"
        elif empty_tables:
            print(f"üìã Algumas tabelas precisam ser populadas: {', '.join(empty_tables)}")
            return status, "partial_population"
        else:
            print("‚úÖ Banco j√° est√° completamente populado")
            return status, "populated"
            
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o inicial: {e}")
        # Em caso de erro, assume status vazio
        error_status = {
            'equipment': {'count': 0, 'needs_population': True, 'table_exists': False},
            'maintenance': {'count': 0, 'needs_population': True, 'table_exists': False},
            'failure': {'count': 0, 'needs_population': True, 'table_exists': False},
            'sap_location': {'count': 0, 'needs_population': True, 'table_exists': False},
            'pmm_2': {'count': 0, 'needs_population': True, 'table_exists': False}
        }
        return error_status, "error"


def determine_required_scripts(status, status_type):
    """
    Determina quais scripts devem ser executados baseados no status das tabelas.
    
    Args:
        status: Dict com status detalhado das tabelas
        status_type: Tipo de status ("empty", "missing_tables", "partial_population", "populated")
    
    Returns:
        Dict com scripts que devem ser executados
    """
    scripts_to_run = {
        'create_tables': False,
        'populate_database': False,
        'import_localidades_sap': False,
        'correlate_equipment_locations': False,
        'populate_pmm_2': False
    }
    
    if status_type in ["empty", "missing_tables", "error"]:
        # Se est√° vazio ou com tabelas faltando, executa tudo
        scripts_to_run['create_tables'] = True
        scripts_to_run['populate_database'] = True
        scripts_to_run['import_localidades_sap'] = True
        scripts_to_run['correlate_equipment_locations'] = True
        scripts_to_run['populate_pmm_2'] = True
    
    elif status_type == "partial_population":
        # Se √© popula√ß√£o parcial, executa apenas os necess√°rios
        
        # Se n√£o tem tabelas, cria primeiro
        missing_tables = [table for table, info in status.items() if not info['table_exists']]
        if missing_tables:
            scripts_to_run['create_tables'] = True
        
        # Dados b√°sicos (equipamentos, manuten√ß√µes, falhas)
        needs_basic_data = (
            status['equipment']['needs_population'] or 
            status['maintenance']['needs_population'] or 
            status['failure']['needs_population']
        )
        if needs_basic_data:
            scripts_to_run['populate_database'] = True
        
        # Localidades SAP
        if status['sap_location']['needs_population']:
            scripts_to_run['import_localidades_sap'] = True
        
        # Correla√ß√£o (apenas se tem equipamentos e localidades)
        if (not status['equipment']['needs_population'] and 
            not status['sap_location']['needs_population']):
            scripts_to_run['correlate_equipment_locations'] = True
        
        # PMM_2
        if status['pmm_2']['needs_population']:
            scripts_to_run['populate_pmm_2'] = True
    
    return scripts_to_run


async def main():
    """Fun√ß√£o principal - configura banco completo."""
    print("üöÄ PROATIVO - CONFIGURA√á√ÉO AUTOM√ÅTICA INTELIGENTE")
    print("=" * 60)
    print("Este script ir√°:")
    print("   1Ô∏è‚É£  Verificar status detalhado de cada tabela")
    print("   2Ô∏è‚É£  Determinar scripts necess√°rios automaticamente")
    print("   3Ô∏è‚É£  Criar tabelas (se necess√°rio)")
    print("   4Ô∏è‚É£  Popular dados b√°sicos (se necess√°rio)")
    print("   5Ô∏è‚É£  Importar localidades SAP (se necess√°rio)")
    print("   6Ô∏è‚É£  Correlacionar equipamentos com localidades (se necess√°rio)")
    print("   7Ô∏è‚É£  Popular dados PMM_2 (se necess√°rio)")
    print("   8Ô∏è‚É£  Verificar resultado final")
    print("=" * 60)
    print("‚ú® NOVO: Executa apenas os scripts necess√°rios para cada tabela!")
    
    try:
        # ETAPA 1: Verifica√ß√£o inicial
        status, status_type = await check_initial_status()
        
        if status_type == "populated":
            print("\nüéâ BANCO J√Å EST√Å COMPLETAMENTE CONFIGURADO!")
            print("   Nenhuma a√ß√£o necess√°ria.")
            return True
        
        # ETAPA 2: Determinar scripts necess√°rios
        scripts_to_run = determine_required_scripts(status, status_type)
        
        print(f"\nüìã Status: {status_type}")
        print(f"üìã Scripts a executar:")
        for script, should_run in scripts_to_run.items():
            if should_run:
                print(f"   ‚úÖ {script}")
            else:
                print(f"   ‚è≠Ô∏è  {script} (n√£o necess√°rio)")
        
        # ETAPA 3: Criar tabelas (se necess√°rio)
        if scripts_to_run['create_tables']:
            success = await run_script("create_tables.py", "CRIANDO TABELAS")
            if not success:
                print("\n‚ùå FALHA na cria√ß√£o de tabelas - abortando")
                return False
        
        # ETAPA 4: Popular dados b√°sicos (se necess√°rio)
        if scripts_to_run['populate_database']:
            success = await run_script("populate_database.py", "POPULANDO DADOS B√ÅSICOS")
            if not success:
                print("\n‚ùå FALHA na popula√ß√£o b√°sica - abortando")
                return False
        
        # ETAPA 5: Importar localidades SAP (se necess√°rio)
        if scripts_to_run['import_localidades_sap']:
            success = await run_script("import_localidades_sap.py", "IMPORTANDO LOCALIDADES SAP")
            if not success:
                print("\n‚ö†Ô∏è  FALHA na importa√ß√£o de localidades SAP - continuando")
                # N√£o aborta aqui, pois √© n√£o-cr√≠tico
        
        # ETAPA 6: Correlacionar equipamentos com localidades (se necess√°rio)
        if scripts_to_run['correlate_equipment_locations']:
            success = await run_script("correlate_equipment_locations.py", "CORRELACIONANDO EQUIPAMENTOS COM LOCALIDADES")
            if not success:
                print("\n‚ö†Ô∏è  FALHA na correla√ß√£o de localidades - continuando")
                # N√£o aborta aqui, pois √© n√£o-cr√≠tico
        
        # ETAPA 7: Popular dados PMM_2 (se necess√°rio)
        if scripts_to_run['populate_pmm_2']:
            success = await run_script("populate_pmm_2.py", "POPULANDO DADOS PMM_2")
            if not success:
                print("\n‚ö†Ô∏è  FALHA na popula√ß√£o de PMM_2 - continuando")
                # N√£o aborta aqui, pois √© n√£o-cr√≠tico
        
        # ETAPA 8: Verifica√ß√£o final
        success = await run_script("check_database.py", "VERIFICA√á√ÉO FINAL")
        
        if success:
            print("\n" + "=" * 60)
            print("üéâ CONFIGURA√á√ÉO COMPLETA FINALIZADA COM SUCESSO!")
            print("=" * 60)
            print("‚úÖ Tabelas criadas")
            print("‚úÖ Dados b√°sicos populados")
            print("‚úÖ Localidades SAP importadas")
            print("‚úÖ Equipamentos correlacionados com localidades")
            print("‚úÖ Dados PMM_2 populados")
            print("‚úÖ Sistema pronto para uso")
            print("=" * 60)
            return True
        else:
            print("\n‚ùå VERIFICA√á√ÉO FINAL FALHOU")
            return False
            
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("‚ö° Iniciando configura√ß√£o autom√°tica...")
    success = asyncio.run(main())
    
    if success:
        print("\n‚ú® Sistema PROAtivo pronto para uso!")
        sys.exit(0)
    else:
        print("\nüí• Configura√ß√£o falhou!")
        sys.exit(1) 