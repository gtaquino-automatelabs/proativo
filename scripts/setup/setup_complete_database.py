# File: scripts/setup/setup_complete_database.py

import asyncio
import sys
import os
from pathlib import Path

# Configurar paths (already present in your file)
current_dir = Path(__file__).parent
project_dir = current_dir.parent.parent
sys.path.insert(0, str(project_dir))
os.environ['PYTHONPATH'] = str(project_dir)

from src.database.connection import db_connection, init_database
# Import check_database_status directly to use it multiple times
from scripts.setup.check_database import check_database_status


async def run_script(script_name, description):
    """Executa um script e retorna sucesso/falha. (Function remains unchanged)"""
    print(f"\nüîÑ {description}")
    print("=" * 50)
    
    script_path = current_dir / script_name
    
    if not script_path.exists():
        print(f"‚ùå Script n√£o encontrado: {script_path}")
        return False
    
    try:
        # Importa e executa o script
        if script_name == "create_tables.py":
            from scripts.setup.create_tables import main as create_main
            success = await create_main()
        elif script_name == "populate_database.py":
            from scripts.setup.populate_database import main as populate_main
            success = await populate_main()
        elif script_name == "import_localidades_sap.py":
            from scripts.setup.import_localidades_sap import main as import_main
            success = await import_main()
        elif script_name == "correlate_equipment_locations.py":
            from scripts.setup.correlate_equipment_locations import main as correlate_main
            success = await correlate_main()
        elif script_name == "populate_pmm_2.py":
            from scripts.setup.populate_pmm_2 import main as populate_pmm_2_main
            success = await populate_pmm_2_main()
        elif script_name == "check_database.py":
            from scripts.setup.check_database import check_database_empty
            success = not await check_database_empty()
        else:
            print(f"‚ùå Script n√£o reconhecido: {script_name}")
            return False
        
        if success:
            print(f"‚úÖ {description} - CONCLU√çDO")
            return True
        else:
            print(f"‚ùå {description} - FALHOU")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar {script_name}: {e}")
        return False


async def check_initial_status_wrapper(): # Renomeado para evitar conflito de nome se check_database_status for importado diretamente
    """Verifica o status detalhado do banco e determina que a√ß√µes s√£o necess√°rias. (Function remains unchanged)"""
    print("üîç VERIFICA√á√ÉO INICIAL")
    print("=" * 50)
    
    try:
        await init_database()
        
        status = await check_database_status()
        
        missing_tables = [table for table, info in status.items() if not info['table_exists']]
        empty_tables = [table for table, info in status.items() if info['needs_population'] and info['table_exists']]
        total_records = sum(table['count'] for table in status.values())
        
        if missing_tables:
            print("üîß Algumas tabelas n√£o existem - cria√ß√£o necess√°ria")
            return status, "Tabelas faltando"
        elif total_records == 0:
            print("üí° Banco vazio - configura√ß√£o completa necess√°ria")
            return status, "Vazio"
        elif empty_tables:
            print(f"üìã Algumas tabelas precisam ser populadas: {', '.join(empty_tables)}")
            return status, "Popula√ß√£o parcial"
        else:
            print("‚úÖ Banco j√° est√° completamente populado")
            return status, "Populado"
            
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o inicial: {e}")
        error_status = {
            'equipment': {'count': 0, 'needs_population': True, 'table_exists': False},
            'maintenance': {'count': 0, 'needs_population': True, 'table_exists': False},
            'failure': {'count': 0, 'needs_population': True, 'table_exists': False},
            'sap_location': {'count': 0, 'needs_population': True, 'table_exists': False},
            'pmm_2': {'count': 0, 'needs_population': True, 'table_exists': False}
        }
        return error_status, "error"


def determine_required_scripts(status, status_type):
    """
    Determines which scripts should be executed based on table status. (Function remains unchanged)
    
    Args:
        status: Dict with detailed table status
        status_type: Type of status ("empty", "missing_tables", "partial_population", "populated")
    
    Returns:
        Dict with scripts that should be executed
    """
    scripts_to_run = {
        'create_tables': False,
        'populate_database': False, # This will now encompass deriving equipments
        'import_localidades_sap': False,
        'correlate_equipment_locations': False, # This step is now effectively merged into populate_database
        'populate_pmm_2': False
    }
    
    if status_type in ["Vazio", "Tabelas faltando", "error"]: # Updated status_type names
        # If empty or tables missing, run everything in correct order
        scripts_to_run['create_tables'] = True
        scripts_to_run['import_localidades_sap'] = True # Need SAP locations first
        scripts_to_run['populate_pmm_2'] = True # Need PMM_2 data first
        scripts_to_run['populate_database'] = True # This now derives equipment and populates other data
    
    elif status_type == "Popula√ß√£o parcial": # Updated status_type name
        # If partial, execute only necessary parts
        if not status['equipment']['table_exists'] or not status['maintenance']['table_exists'] or not status['failure']['table_exists'] or not status['sap_location']['table_exists'] or not status['pmm_2']['table_exists']:
            scripts_to_run['create_tables'] = True # Ensure tables exist if any are missing

        if status['sap_location']['needs_population']:
            scripts_to_run['import_localidades_sap'] = True
        
        if status['pmm_2']['needs_population']:
            scripts_to_run['populate_pmm_2'] = True
        
        # If equipments, maintenances, or failures need population, run populate_database.
        # This implicitly means SAP locations and PMM_2 should have been populated first.
        if (status['equipment']['needs_population'] or 
            status['maintenance']['needs_population'] or 
            status['failure']['needs_population']):
            scripts_to_run['populate_database'] = True
            
    return scripts_to_run


async def main():
    """Fun√ß√£o principal - configura banco completo."""
    print("üöÄ PROATIVO - CONFIGURA√á√ÉO AUTOM√ÅTICA INTELIGENTE")
    print("=" * 60)
    print("Este script ir√°:")
    print("   1Ô∏è‚É£  Verificar status detalhado de cada tabela")
    print("   2Ô∏è‚É£  Determinar scripts necess√°rios automaticamente")
    print("   3Ô∏è‚É£  Criar tabelas (se necess√°rio)")
    print("   4Ô∏è‚É£  Importar localidades SAP (se necess√°rio)")
    print("   5Ô∏è‚É£  Popular dados PMM_2 (se necess√°rio)")
    print("   6Ô∏è‚É£  Popular dados b√°sicos (equipamentos, manuten√ß√µes, falhas) a p partir de PMM_2 (se necess√°rio)")
    print("   7Ô∏è‚É£  Verificar resultado final")
    print("=" * 60)
    print("‚ú® NOVO: Executa apenas os scripts necess√°rios para cada tabela!")
    
    try:
        # ETAPA 1: Verifica√ß√£o inicial
        status, status_type = await check_initial_status_wrapper() # Updated function call
        
        if status_type == "Populado": # Updated status_type name
            print("\nüéâ BANCO J√Å EST√Å COMPLETAMENTE CONFIGURADO!")
            print("   Nenhuma a√ß√£o necess√°ria.")
            return True
        
        # ETAPA 2: Determinar scripts necess√°rios
        scripts_to_run = determine_required_scripts(status, status_type)
        
        print(f"\nüìã Status: {status_type}")
        print(f"üìã Scripts a executar:")
        for script, should_run in scripts_to_run.items():
            if should_run:
                print(f"   ‚úÖ {script}")
            else:
                print(f"   ‚è≠Ô∏è  {script} (n√£o necess√°rio)")
        
        # ETAPA 3: Criar tabelas (se necess√°rio) - Must run first to ensure tables exist
        if scripts_to_run['create_tables']:
            success = await run_script("create_tables.py", "CRIANDO TABELAS")
            if not success:
                print("\n‚ùå FALHA na cria√ß√£o de tabelas - abortando")
                return False
        
        # ETAPA 4: Importar localidades SAP (MOVED HERE: needed before equipment population)
        if scripts_to_run['import_localidades_sap']:
            success = await run_script("import_localidades_sap.py", "IMPORTANDO LOCALIDADES SAP")
            if not success:
                print("\n‚ö†Ô∏è  FALHA na importa√ß√£o de localidades SAP - continuando (mas pode afetar a vincula√ß√£o de equipamentos)")
        
        # ETAPA 5: Popular dados PMM_2 (MOVED HERE: needed before equipment population)
        if scripts_to_run['populate_pmm_2']:
            success = await run_script("populate_pmm_2.py", "POPULANDO DADOS PMM_2")
            if not success:
                print("\n‚ö†Ô∏è  FALHA na popula√ß√£o de PMM_2 - continuando (mas pode afetar a deriva√ß√£o de equipamentos)")
            
            # --- NOVO PASSO CR√çTICO: RE-VALIDAR PMM_2 AP√ìS POPULA√á√ÉO ---
            print("\nüîç Verificando status de PMM_2 ap√≥s popula√ß√£o...")
            pmm_2_status_after_populate = await check_database_status()
            if pmm_2_status_after_populate['pmm_2']['count'] == 0:
                print("‚ùå ERRO GRAVE: PMM_2 est√° vazio AP√ìS a popula√ß√£o! Abortando.")
                return False
            print(f"‚úÖ PMM_2 agora tem {pmm_2_status_after_populate['pmm_2']['count']} registros.")

        # ETAPA 6: Popular dados b√°sicos (equipamentos, manuten√ß√µes, falhas) 
        # This now includes equipment derivation from PMM_2 and relies on previous steps
        if scripts_to_run['populate_database']:
            success = await run_script("populate_database.py", "POPULANDO DADOS B√ÅSICOS (EQUIPAMENTOS, MANUTEN√á√ïES, FALHAS)")
            if not success:
                print("\n‚ùå FALHA na popula√ß√£o b√°sica - abortando")
                return False
        
        # ETAPA 7: Verifica√ß√£o final
        # Note: We now re-import check_database_empty here to avoid name conflicts with directly imported check_database_status
        from scripts.setup.check_database import check_database_empty as final_check_database_empty 
        success = not await final_check_database_empty() # Inverte l√≥gica: True se tem dados (sucesso)
        
        if success:
            print("\n" + "=" * 60)
            print("üéâ CONFIGURA√á√ÉO COMPLETA FINALIZADA COM SUCESSO!")
            print("=" * 60)
            print("‚úÖ Tabelas criadas")
            print("‚úÖ Localidades SAP importadas")
            print("‚úÖ Dados PMM_2 populados")
            print("‚úÖ Dados b√°sicos (equipamentos, manuten√ß√µes, falhas) populados a partir de PMM_2")
            print("‚úÖ Sistema pronto para uso")
            print("=" * 60)
            return True
        else:
            print("\n‚ùå VERIFICA√á√ÉO FINAL FALHOU")
            return False
            
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("‚ö° Iniciando configura√ß√£o autom√°tica...")
    success = asyncio.run(main())
    
    if success:
        print("\n‚ú® Sistema PROAtivo pronto para uso!")
        sys.exit(0)
    else:
        print("\nüí• Configura√ß√£o falhou!")
        sys.exit(1)